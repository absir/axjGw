// Objective-C API for talking to gw/pkg/asdk Go package.
//   gobind -lang=objc gw/pkg/asdk
//
// File is generated by gobind. Do not edit.

#ifndef __Asdk_H__
#define __Asdk_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class AsdkAdapter;
@class AsdkClient;
@protocol AsdkOpt;
@class AsdkOpt;

@protocol AsdkOpt <NSObject>
- (NSString* _Nonnull)loadStorage:(NSString* _Nullable)name;
- (NSData* _Nullable)loginData:(AsdkAdapter* _Nullable)adapter;
- (void)onLast:(NSString* _Nullable)gid connVer:(int32_t)connVer continues:(BOOL)continues;
- (void)onPush:(NSString* _Nullable)uri data:(NSData* _Nullable)data tid:(int64_t)tid;
- (void)onState:(AsdkAdapter* _Nullable)adapter state:(long)state err:(NSString* _Nullable)err data:(NSData* _Nullable)data;
- (void)saveStorage:(NSString* _Nullable)name value:(NSString* _Nullable)value;
@end

@interface AsdkAdapter : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (int64_t)getCid;
- (NSString* _Nonnull)getUnique;
- (BOOL)isLooped;
@end

@interface AsdkClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(NSString* _Nullable)addr out_:(BOOL)out_ encry:(BOOL)encry compressMin:(long)compressMin dataMax:(long)dataMax checkDrt:(long)checkDrt rqIMax:(long)rqIMax opt:(id<AsdkOpt> _Nullable)opt;
- (void)close;
- (AsdkAdapter* _Nullable)conn;
// skipped method Client.Loop with unsupported parameter or return types

// skipped method Client.Req with unsupported parameter or return types

@end

FOUNDATION_EXPORT const int64_t AsdkCLOSE;
FOUNDATION_EXPORT const int64_t AsdkCONN;
FOUNDATION_EXPORT const int64_t AsdkERROR;
FOUNDATION_EXPORT const int64_t AsdkKICK;
FOUNDATION_EXPORT const int64_t AsdkLOOP;
FOUNDATION_EXPORT const int64_t AsdkOPEN;

@interface Asdk : NSObject
+ (NSData* _Nullable) succ;
+ (void) setSUCC:(NSData* _Nullable)v;

@end

FOUNDATION_EXPORT AsdkClient* _Nullable AsdkNewClient(NSString* _Nullable addr, BOOL out_, BOOL encry, long compressMin, long dataMax, long checkDrt, long rqIMax, id<AsdkOpt> _Nullable opt);

@class AsdkOpt;

@interface AsdkOpt : NSObject <goSeqRefInterface, AsdkOpt> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * 载入缓存，路由压缩字典
 */
- (NSString* _Nonnull)loadStorage:(NSString* _Nullable)name;
/**
 * 授权数据
 */
- (NSData* _Nullable)loginData:(AsdkAdapter* _Nullable)adapter;
/**
 * 推送消息管道通知 gid 管道编号 connVer 推送消息时，连接版本，调用逻辑服务器Disc方法，附加验证 continues 为发送推送数据时，附加通知
可以在附加消息逻辑 检测当前gid管道 是否监听， 不监听可调用逻辑服务器Disc方法， 防止之前调用逻辑服务器Disc可以未成功的情况
 */
- (void)onLast:(NSString* _Nullable)gid connVer:(int32_t)connVer continues:(BOOL)continues;
/**
 * 推送数据处理 !uri && !data && tid 为 fid编号消息发送失败
 */
- (void)onPush:(NSString* _Nullable)uri data:(NSData* _Nullable)data tid:(int64_t)tid;
/**
 * 监听client连接状态编号

	   gw.state
	   state: {
	       CONN: 0, // 开始连接
	       OPEN: 1, // 连接开启
	       LOOP: 2, // 可以通讯
	       CLOSE: 3, // 连接关闭
	       ERROR: 4, // 连接错误
	       KICK: 5, // 被剔
	   },
 */
- (void)onState:(AsdkAdapter* _Nullable)adapter state:(long)state err:(NSString* _Nullable)err data:(NSData* _Nullable)data;
/**
 * 保存缓存
 */
- (void)saveStorage:(NSString* _Nullable)name value:(NSString* _Nullable)value;
@end

#endif
