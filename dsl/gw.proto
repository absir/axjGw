syntax = "proto3";

package gw;

option go_package = "./gw";
option java_multiple_files = true;
option java_package = "gen.gw";

enum Result {
  // 失败
  Fail = 0;
  // 服务路由不存在
  ProdNo = 1;
  // 服务错误,分布冲突
  ProdErr = 2;
  // ID不存在
  IdNone = 3;
  // 成功
  Succ = 16;
}

message Void {
}

message CidReq {
  // 客户端编号
  int64 cid = 1;
}

message CidsReq {
  // 客户端编号列表
  repeated int64 cids = 1;
}

message UIdRep {
  // 整形用户编号
  int64 uid = 1;
  // 字符串用户编号
  string sid = 2;
}

message UIdsRep {
  // 用户编号列表
  repeated UIdRep uidReps = 1;
}

message GidReq {
  // 用户编号、群组、管道编号
  string gid = 1;
}

message GidsReq {
  // 用户编号、群组、管道编号列表
  repeated string gids = 1;
}

message BoolRep {
  // 值
  bool val = 1;
}

message BoolsRep {
  // 值列表
  repeated bool vals = 1;
}

message CidsRep {
  // cid列表
  repeated int64 cids = 1;
}

message Id32Rep {
  // 整形编号
  int32 id = 1;
}

message Id64Rep {
  // 长整编号
  int64 id = 1;
}

message DataRep {
  // 二进制数据
  bytes data = 1;
  // 请求错误
  int32 err = 2;
}

message LoginReq {
  // 客户端唯一编号
  int64 cid = 1;
  // 登录数据
  bytes data = 2;
  // 客户端地址
  string addr = 3;
}

message LoginRep {
  bool succ = 1;
  // 数字编号
  int64 uid = 2;
  // 字符编号
  string sid = 3;
  // 唯一标识(一个标识，只允许一个Conn)
  string unique = 4;
  // 最大请求数
  int32 limit = 5;
  // 路由服务编号
  int32 rid = 6;
  // 路由服务映射
  map<string, int32> rids = 7;
  // 登录返回
  bytes data = 8;
  // 清理队列
  bool clear = 9;
  // 登录回调
  bool back = 10;
  // 登录回调数据
  bytes backData = 11;
  // 断线回调
  bool discBack = 12;
  // 登录失败
  bytes kickData = 13;
  // 获取管道
  optional GLastsReq lastsReq = 14;
  // 获取管道
  repeated GLastsReq lastsReqs = 15;
  // 未读消息列表
  repeated string unreadTids = 16;
}

message LoginBack {
  // 客户端编号
  int64 cid = 1;
  // 客户端登录，同用户下唯一标识
  string unique = 2;
  // 用户整型编号
  int64 uid = 3;
  // 用户字符编号
  string sid = 4;
  // 回调数据
  optional bytes data = 5;
}

message Member {
  // 用户编号
  string gid = 1;
  // 写扩散时，不推送，需要点击查看
  bool nofeed = 2;
}

message TeamRep {
  // 版本
  int64 version = 1;
  // 用户列表
  repeated Member members = 2;
  // 读扩散、写扩散
  bool readFeed = 3;
  // 未读消息扩散
  bool unreadFeed = 4;
}

message AddrReq {
  // gid
  string gid = 1;
  // 子名
  string sub = 2;
  // 全名
  string name = 3;
  // 协议名
  string proto = 4;
  // 服务名
  string sName = 5;
}

message AddrRep {
  // 映射cid
  int64 cid = 1;
  // 映射gid
  string gid = 2;
  // 映射地址
  string addr = 3;
}

message GwRegReq {
  // 网关数量
  int32 idCount = 1;
  // 网关地址
  string IdUrl = 3;
  // 当前网关id
  int32 id = 2;
  // 当前网关metas
  map<string, string> metas = 4;
}

message TrafficReq {
  // 客户端编号
  optional string cid = 1;
  // 请求name
  optional string gid = 2;
  // 请求name
  optional string sub = 3;
  // 开始时间
  int64 start = 4;
  // 流入
  int64 in = 5;
  // 流出
  int64 out = 6;
}

service Acl {
  // 登录
  rpc login(LoginReq) returns (LoginRep);
  // 登录回调
  rpc loginBack(LoginBack) returns (Id32Rep);
  // 断线回调
  rpc discBack(LoginBack) returns (Id32Rep);
  // 组查询 tid
  rpc team(GidReq) returns (TeamRep);
  // 代理查询
  rpc addr(AddrReq) returns (AddrRep);
  // 分布式网关注册
  rpc gwReg(GwRegReq) returns (BoolRep);
  // 流量上报
  rpc traffic(TrafficReq) returns (BoolRep);
}

message PassReq {
  // 客户端编号
  int64 cid = 1;
  // 用户整型编号
  int64 uid = 2;
  // 用户字符编号
  string sid = 3;
  // 请求路径
  string uri = 4;
  // 请求数据
  bytes data = 5;
}

message ProdsRep {
  // 服务名
  string name = 1;
  // 服务列表
  repeated Prod prods = 2;
}

message Prod {
  // 服务编号
  int32 id = 1;
  // 服务地址
  string uri = 2;
}

service Pass {
  // 请求
  rpc req(PassReq) returns (DataRep);
  // 发送
  rpc send(PassReq) returns (Id32Rep);
  // 服务列表
  rpc prods(Void) returns (ProdsRep);
}

message CloseReq {
  // 客户端编号
  int64 cid = 1;
  // 关闭原因
  string reason = 2;
}

message KickReq {
  // 客户端编号
  int64 cid = 1;
  // 踢出原因
  bytes data = 2;
}

message RidReq {
  // 客户端编号
  int64 cid = 1;
  // Pass组名
  string name = 2;
  // Pass组服务编号
  int32 rid = 3;
}

message RidsReq {
  // 客户端编号
  int64 cid = 1;
  // Pass组名，编号映射
  map<string, int32> rids = 2;
}

message PushReq {
  // 客户端编号
  int64 cid = 1;
  // 路径
  string uri = 2;
  // 数据
  bytes data = 3;
  // 是否数据隔离，gw用不到
  bool isolate = 4;
  // PUSHI 携带消息编号，gw一般不用
  int64 id = 5;
  // 数据压缩状态，gw不用
  int32 cData = 6;
}

message GPushReq {
  // 群组，管道编号
  string gid = 1;
  // 路径
  string uri = 2;
  // 数据
  bytes data = 3;
  // qs 消息质量，0 内存发送成功 1 队列发送[unique 唯一标识(消息队列，一个标识只需要最新数据)] 2 last队列 3 last 队列持久化
  int32 qs = 4;
  // qs 为1时， 唯一unique会覆盖更新
  string unique = 5;
  // 持久同时是否强制创建队列
  bool queue = 6;
  // PUSHI 携带消息编号，gw一般不用
  int64 fid = 7;
  // 是否数据隔离，gw用不到
  bool isolate = 8;
}

message GConnReq {
  // 客户端编号
  int64 cid = 1;
  // 群组，管道编号
  string gid = 2;
  // 群组，管道编号下连接唯一编号，可以cid或用户uid相同
  string unique = 3;
  // 连接相同唯一编号后，踢出旧客户端，下线，gw一般不用
  bool kick = 4;
  // 连接信息新版本，gw一般不用
  bool newVer = 5;
}

message GDiscReq {
  // 客户端编号
  optional int64 cid = 1;
  // 群组，管道编号
  string gid = 2;
  // 群组，管道编号下连接唯一编号，必须和连接一致
  string unique = 3;
  // 连接信息新版本
  int32 connVer = 4;
  // 客户端gid
  optional string cGid = 5;
}

message GLastsReq {
  // 群组，管道编号
  string gid = 1;
  // 客户端编号
  int64 cid = 2;
  // 群组，管道编号下连接唯一编号，可以cid或用户uid相同
  string unique = 3;
  // 最后消息编号 <65535时 = 获取缓存消息数量， lastId = 1
  int64 lastId = 4;
  // <= 0 不连续获取， 每次通过REQ_LAST 通知更新后，主动再调用GLasts， =1 不发送REQ_LASTC管道LASTC消息 >1 最多多少条消息发送管道LASTC消息 MSD_ID_SUB_NUM -1 订阅计数器
  int32 continuous = 5;
}

message SendReq {
  // 发送放用户编号
  string fromId = 1;
  // 接收方用户编号
  string toId = 2;
  // 消息路径
  string uri = 3;
  // 消息数据
  bytes data = 4;
  // 是否持久消息
  bool db = 5;
}

message TPushReq {
  // 发送方用户编号
  string fromId = 1;
  // 群编号
  string tid = 2;
  // 读扩散
  bool readFeed = 3;
  // 消息路径
  string uri = 4;
  // 消息数据
  bytes data = 5;
  // 是否持久消息
  bool db = 6;
  // 持久同时是否强制创建队列
  bool queue = 7;
  // 唯一标识
  string unique = 8;
  // 未读消息扩散
  bool unreadFeed = 9;
}

message RevokeReq {
  int64 id = 1;
  string gid = 2;
  // 消息撤销通知
  GPushReq push = 3;
  // 消息撤销通知
  TPushReq tPush = 4;
  // 删除消息
  bool delete = 5;
}

message ProxyReq {
  map<string, ProxyRule> rules = 1;
}

message ProxyRule {
  int64 cid = 1;
  string gid = 2;
  string addr = 3;
}

message DialProxyReq {
  int64 cid = 1;
  string gid = 2;
  string addr = 3;
  int64 timeout = 4;
}

message DialsProxyReq {
  repeated DialProxyReq dials = 1;
  int32 timeout = 4;
}

message UnreadTids {
  string gid = 1;
  repeated string tids = 2;
}

message MsgListReq {
  string gid = 1;
  int64 id = 2;
  int32 limit = 3;
  optional bool next = 4;
}

message MsgListEl {
  int64  id = 1;
  int64  fid = 2;
  optional string uri = 3;
  optional bytes data = 4;
}

message MsgListRep {
  repeated MsgListEl list = 1;
}

// 网关
service Gateway {
  // uid查询
  rpc uid(CidReq) returns (UIdRep);
  // 在线查询
  rpc online(GidReq) returns (BoolRep);
  // 在线查询
  rpc onlines(GidsReq) returns (BoolsRep);
  // 关闭连接
  rpc close(CloseReq) returns (Id32Rep);
  // 软关闭连接
  rpc kick(KickReq) returns (Id32Rep);
  // 服务编号
  rpc rid(RidReq) returns (Id32Rep);
  // 服务编号
  rpc rids(RidsReq) returns (Id32Rep);
  // 简单推送
  rpc push(PushReq) returns (Id32Rep);
  // 查询cids
  rpc cids(GidReq) returns (CidsRep);
  // 注册监听gid
  rpc gConn(GConnReq) returns (Id32Rep);
  // 断开监听gid
  rpc gDisc(GDiscReq) returns (Id32Rep);
  // 组通知 gid
  rpc gLast(GidReq) returns (Id32Rep);
  // 组推送 // uri 主题 // binary 消息体 // qs 消息质量，0 内存发送成功 1 队列发送[unique 唯一标识(消息队列，一个标识只需要最新数据)] 2 last队列 3 last 队列持久化
  rpc gPush(GPushReq) returns (Id64Rep);
  // 获取组更新消息
  rpc gLasts(GLastsReq) returns (Id32Rep);
  // 点对点聊天
  rpc send(SendReq) returns (Id32Rep);
  // readfeed读扩散，常用于聊天室
  rpc tPush(TPushReq) returns (Id32Rep);
  // 组更新、删除 tid
  rpc tDirty(GidReq) returns (Id32Rep);
  // 撤销消息
  rpc revoke(RevokeReq) returns (BoolRep);
  // 设置代理
  rpc setProxy(ProxyReq) returns (BoolRep);
  // 设置服务列表
  rpc setProds(ProdsRep) returns (BoolRep);
  // 连接代理
  rpc dialProxy(DialProxyReq) returns (BoolRep);
  // 连接代理复数
  rpc dialsProxy(DialsProxyReq) returns (BoolsRep);
  // 未读消息.查询
  rpc unreadTids(UnreadTids) returns (Id32Rep);
  // 消息列表
  rpc msgList(MsgListReq) returns (MsgListRep);
}