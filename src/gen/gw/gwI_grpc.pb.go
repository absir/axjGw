// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: dsl/gwI.proto

package gw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GatewayI_Uid_FullMethodName        = "/gw.GatewayI/uid"
	GatewayI_Online_FullMethodName     = "/gw.GatewayI/online"
	GatewayI_Onlines_FullMethodName    = "/gw.GatewayI/onlines"
	GatewayI_Close_FullMethodName      = "/gw.GatewayI/close"
	GatewayI_Kick_FullMethodName       = "/gw.GatewayI/kick"
	GatewayI_Alive_FullMethodName      = "/gw.GatewayI/alive"
	GatewayI_Rid_FullMethodName        = "/gw.GatewayI/rid"
	GatewayI_Rids_FullMethodName       = "/gw.GatewayI/rids"
	GatewayI_Cids_FullMethodName       = "/gw.GatewayI/cids"
	GatewayI_CidGid_FullMethodName     = "/gw.GatewayI/cidGid"
	GatewayI_GidCid_FullMethodName     = "/gw.GatewayI/gidCid"
	GatewayI_GidHasCid_FullMethodName  = "/gw.GatewayI/gidHasCid"
	GatewayI_Conn_FullMethodName       = "/gw.GatewayI/conn"
	GatewayI_Disc_FullMethodName       = "/gw.GatewayI/disc"
	GatewayI_Rep_FullMethodName        = "/gw.GatewayI/rep"
	GatewayI_Last_FullMethodName       = "/gw.GatewayI/last"
	GatewayI_Push_FullMethodName       = "/gw.GatewayI/push"
	GatewayI_GQueue_FullMethodName     = "/gw.GatewayI/gQueue"
	GatewayI_GClear_FullMethodName     = "/gw.GatewayI/gClear"
	GatewayI_GLasts_FullMethodName     = "/gw.GatewayI/gLasts"
	GatewayI_GLast_FullMethodName      = "/gw.GatewayI/gLast"
	GatewayI_GPush_FullMethodName      = "/gw.GatewayI/gPush"
	GatewayI_GPushA_FullMethodName     = "/gw.GatewayI/gPushA"
	GatewayI_Send_FullMethodName       = "/gw.GatewayI/send"
	GatewayI_TPush_FullMethodName      = "/gw.GatewayI/tPush"
	GatewayI_TDirty_FullMethodName     = "/gw.GatewayI/tDirty"
	GatewayI_TStarts_FullMethodName    = "/gw.GatewayI/tStarts"
	GatewayI_SetProds_FullMethodName   = "/gw.GatewayI/setProds"
	GatewayI_Read_FullMethodName       = "/gw.GatewayI/read"
	GatewayI_Unread_FullMethodName     = "/gw.GatewayI/unread"
	GatewayI_Unreads_FullMethodName    = "/gw.GatewayI/unreads"
	GatewayI_UnreadTids_FullMethodName = "/gw.GatewayI/unreadTids"
)

// GatewayIClient is the client API for GatewayI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayIClient interface {
	// uid查询
	Uid(ctx context.Context, in *CidReq, opts ...grpc.CallOption) (*UIdRep, error)
	// 在线查询
	Online(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*BoolRep, error)
	// 在线查询
	Onlines(ctx context.Context, in *GidsReq, opts ...grpc.CallOption) (*BoolsRep, error)
	// 关闭连接
	Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 软关闭连接
	Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 存活 cid
	Alive(ctx context.Context, in *CidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 服务编号
	Rid(ctx context.Context, in *RidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 服务编号
	Rids(ctx context.Context, in *RidsReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 查询cids
	Cids(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*CidsRep, error)
	// 设置cidGid状态
	CidGid(ctx context.Context, in *CidGidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// gidCid状态校验
	GidCid(ctx context.Context, in *CidGidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// gid
	GidHasCid(ctx context.Context, in *GidHasCidReq, opts ...grpc.CallOption) (*BoolRep, error)
	// 连接
	Conn(ctx context.Context, in *GConnReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 断开
	Disc(ctx context.Context, in *GDiscReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 写入数据
	Rep(ctx context.Context, in *RepReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 最新消息通知
	Last(ctx context.Context, in *ILastReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 推送
	Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 消息队列初始化
	GQueue(ctx context.Context, in *IGQueueReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 消息队列清理
	GClear(ctx context.Context, in *IGClearReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 主动获取消息
	GLasts(ctx context.Context, in *GLastsReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 通知 gid
	GLast(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 推送
	GPush(ctx context.Context, in *GPushReq, opts ...grpc.CallOption) (*Id64Rep, error)
	// 推送确认
	GPushA(ctx context.Context, in *IGPushAReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 点对点聊天
	Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 群消息发送
	TPush(ctx context.Context, in *TPushReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 组更新、删除 tid
	TDirty(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 组发送管道启动 tid
	TStarts(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 设置服务列表
	SetProds(ctx context.Context, in *ProdsRep, opts ...grpc.CallOption) (*BoolRep, error)
	// 已读消息
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 未读消息
	Unread(ctx context.Context, in *UnreadReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 未读消息
	Unreads(ctx context.Context, in *UnreadReqs, opts ...grpc.CallOption) (*Id32Rep, error)
	// 未读消息.查询
	UnreadTids(ctx context.Context, in *UnreadTids, opts ...grpc.CallOption) (*Id32Rep, error)
}

type gatewayIClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayIClient(cc grpc.ClientConnInterface) GatewayIClient {
	return &gatewayIClient{cc}
}

func (c *gatewayIClient) Uid(ctx context.Context, in *CidReq, opts ...grpc.CallOption) (*UIdRep, error) {
	out := new(UIdRep)
	err := c.cc.Invoke(ctx, GatewayI_Uid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Online(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*BoolRep, error) {
	out := new(BoolRep)
	err := c.cc.Invoke(ctx, GatewayI_Online_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Onlines(ctx context.Context, in *GidsReq, opts ...grpc.CallOption) (*BoolsRep, error) {
	out := new(BoolsRep)
	err := c.cc.Invoke(ctx, GatewayI_Onlines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Kick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Alive(ctx context.Context, in *CidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Alive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Rid(ctx context.Context, in *RidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Rid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Rids(ctx context.Context, in *RidsReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Rids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Cids(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*CidsRep, error) {
	out := new(CidsRep)
	err := c.cc.Invoke(ctx, GatewayI_Cids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) CidGid(ctx context.Context, in *CidGidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_CidGid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GidCid(ctx context.Context, in *CidGidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_GidCid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GidHasCid(ctx context.Context, in *GidHasCidReq, opts ...grpc.CallOption) (*BoolRep, error) {
	out := new(BoolRep)
	err := c.cc.Invoke(ctx, GatewayI_GidHasCid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Conn(ctx context.Context, in *GConnReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Conn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Disc(ctx context.Context, in *GDiscReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Disc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Rep(ctx context.Context, in *RepReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Rep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Last(ctx context.Context, in *ILastReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Last_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Push_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GQueue(ctx context.Context, in *IGQueueReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_GQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GClear(ctx context.Context, in *IGClearReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_GClear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GLasts(ctx context.Context, in *GLastsReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_GLasts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GLast(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_GLast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GPush(ctx context.Context, in *GPushReq, opts ...grpc.CallOption) (*Id64Rep, error) {
	out := new(Id64Rep)
	err := c.cc.Invoke(ctx, GatewayI_GPush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GPushA(ctx context.Context, in *IGPushAReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_GPushA_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) TPush(ctx context.Context, in *TPushReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_TPush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) TDirty(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_TDirty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) TStarts(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_TStarts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) SetProds(ctx context.Context, in *ProdsRep, opts ...grpc.CallOption) (*BoolRep, error) {
	out := new(BoolRep)
	err := c.cc.Invoke(ctx, GatewayI_SetProds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Unread(ctx context.Context, in *UnreadReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Unread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Unreads(ctx context.Context, in *UnreadReqs, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_Unreads_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) UnreadTids(ctx context.Context, in *UnreadTids, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, GatewayI_UnreadTids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayIServer is the server API for GatewayI service.
// All implementations should embed UnimplementedGatewayIServer
// for forward compatibility
type GatewayIServer interface {
	// uid查询
	Uid(context.Context, *CidReq) (*UIdRep, error)
	// 在线查询
	Online(context.Context, *GidReq) (*BoolRep, error)
	// 在线查询
	Onlines(context.Context, *GidsReq) (*BoolsRep, error)
	// 关闭连接
	Close(context.Context, *CloseReq) (*Id32Rep, error)
	// 软关闭连接
	Kick(context.Context, *KickReq) (*Id32Rep, error)
	// 存活 cid
	Alive(context.Context, *CidReq) (*Id32Rep, error)
	// 服务编号
	Rid(context.Context, *RidReq) (*Id32Rep, error)
	// 服务编号
	Rids(context.Context, *RidsReq) (*Id32Rep, error)
	// 查询cids
	Cids(context.Context, *GidReq) (*CidsRep, error)
	// 设置cidGid状态
	CidGid(context.Context, *CidGidReq) (*Id32Rep, error)
	// gidCid状态校验
	GidCid(context.Context, *CidGidReq) (*Id32Rep, error)
	// gid
	GidHasCid(context.Context, *GidHasCidReq) (*BoolRep, error)
	// 连接
	Conn(context.Context, *GConnReq) (*Id32Rep, error)
	// 断开
	Disc(context.Context, *GDiscReq) (*Id32Rep, error)
	// 写入数据
	Rep(context.Context, *RepReq) (*Id32Rep, error)
	// 最新消息通知
	Last(context.Context, *ILastReq) (*Id32Rep, error)
	// 推送
	Push(context.Context, *PushReq) (*Id32Rep, error)
	// 消息队列初始化
	GQueue(context.Context, *IGQueueReq) (*Id32Rep, error)
	// 消息队列清理
	GClear(context.Context, *IGClearReq) (*Id32Rep, error)
	// 主动获取消息
	GLasts(context.Context, *GLastsReq) (*Id32Rep, error)
	// 通知 gid
	GLast(context.Context, *GidReq) (*Id32Rep, error)
	// 推送
	GPush(context.Context, *GPushReq) (*Id64Rep, error)
	// 推送确认
	GPushA(context.Context, *IGPushAReq) (*Id32Rep, error)
	// 点对点聊天
	Send(context.Context, *SendReq) (*Id32Rep, error)
	// 群消息发送
	TPush(context.Context, *TPushReq) (*Id32Rep, error)
	// 组更新、删除 tid
	TDirty(context.Context, *GidReq) (*Id32Rep, error)
	// 组发送管道启动 tid
	TStarts(context.Context, *GidReq) (*Id32Rep, error)
	// 设置服务列表
	SetProds(context.Context, *ProdsRep) (*BoolRep, error)
	// 已读消息
	Read(context.Context, *ReadReq) (*Id32Rep, error)
	// 未读消息
	Unread(context.Context, *UnreadReq) (*Id32Rep, error)
	// 未读消息
	Unreads(context.Context, *UnreadReqs) (*Id32Rep, error)
	// 未读消息.查询
	UnreadTids(context.Context, *UnreadTids) (*Id32Rep, error)
}

// UnimplementedGatewayIServer should be embedded to have forward compatible implementations.
type UnimplementedGatewayIServer struct {
}

func (UnimplementedGatewayIServer) Uid(context.Context, *CidReq) (*UIdRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uid not implemented")
}
func (UnimplementedGatewayIServer) Online(context.Context, *GidReq) (*BoolRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (UnimplementedGatewayIServer) Onlines(context.Context, *GidsReq) (*BoolsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Onlines not implemented")
}
func (UnimplementedGatewayIServer) Close(context.Context, *CloseReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedGatewayIServer) Kick(context.Context, *KickReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (UnimplementedGatewayIServer) Alive(context.Context, *CidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (UnimplementedGatewayIServer) Rid(context.Context, *RidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rid not implemented")
}
func (UnimplementedGatewayIServer) Rids(context.Context, *RidsReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rids not implemented")
}
func (UnimplementedGatewayIServer) Cids(context.Context, *GidReq) (*CidsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cids not implemented")
}
func (UnimplementedGatewayIServer) CidGid(context.Context, *CidGidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CidGid not implemented")
}
func (UnimplementedGatewayIServer) GidCid(context.Context, *CidGidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GidCid not implemented")
}
func (UnimplementedGatewayIServer) GidHasCid(context.Context, *GidHasCidReq) (*BoolRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GidHasCid not implemented")
}
func (UnimplementedGatewayIServer) Conn(context.Context, *GConnReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conn not implemented")
}
func (UnimplementedGatewayIServer) Disc(context.Context, *GDiscReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disc not implemented")
}
func (UnimplementedGatewayIServer) Rep(context.Context, *RepReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rep not implemented")
}
func (UnimplementedGatewayIServer) Last(context.Context, *ILastReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Last not implemented")
}
func (UnimplementedGatewayIServer) Push(context.Context, *PushReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedGatewayIServer) GQueue(context.Context, *IGQueueReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GQueue not implemented")
}
func (UnimplementedGatewayIServer) GClear(context.Context, *IGClearReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GClear not implemented")
}
func (UnimplementedGatewayIServer) GLasts(context.Context, *GLastsReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLasts not implemented")
}
func (UnimplementedGatewayIServer) GLast(context.Context, *GidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLast not implemented")
}
func (UnimplementedGatewayIServer) GPush(context.Context, *GPushReq) (*Id64Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GPush not implemented")
}
func (UnimplementedGatewayIServer) GPushA(context.Context, *IGPushAReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GPushA not implemented")
}
func (UnimplementedGatewayIServer) Send(context.Context, *SendReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedGatewayIServer) TPush(context.Context, *TPushReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TPush not implemented")
}
func (UnimplementedGatewayIServer) TDirty(context.Context, *GidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TDirty not implemented")
}
func (UnimplementedGatewayIServer) TStarts(context.Context, *GidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TStarts not implemented")
}
func (UnimplementedGatewayIServer) SetProds(context.Context, *ProdsRep) (*BoolRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProds not implemented")
}
func (UnimplementedGatewayIServer) Read(context.Context, *ReadReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedGatewayIServer) Unread(context.Context, *UnreadReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unread not implemented")
}
func (UnimplementedGatewayIServer) Unreads(context.Context, *UnreadReqs) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unreads not implemented")
}
func (UnimplementedGatewayIServer) UnreadTids(context.Context, *UnreadTids) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadTids not implemented")
}

// UnsafeGatewayIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayIServer will
// result in compilation errors.
type UnsafeGatewayIServer interface {
	mustEmbedUnimplementedGatewayIServer()
}

func RegisterGatewayIServer(s grpc.ServiceRegistrar, srv GatewayIServer) {
	s.RegisterService(&GatewayI_ServiceDesc, srv)
}

func _GatewayI_Uid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Uid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Uid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Uid(ctx, req.(*CidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Online_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Online(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Onlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Onlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Onlines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Onlines(ctx, req.(*GidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Close(ctx, req.(*CloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Kick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Kick(ctx, req.(*KickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Alive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Alive(ctx, req.(*CidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Rid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Rid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Rid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Rid(ctx, req.(*RidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Rids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Rids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Rids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Rids(ctx, req.(*RidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Cids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Cids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Cids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Cids(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_CidGid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CidGidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).CidGid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_CidGid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).CidGid(ctx, req.(*CidGidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GidCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CidGidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GidCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_GidCid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GidCid(ctx, req.(*CidGidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GidHasCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidHasCidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GidHasCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_GidHasCid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GidHasCid(ctx, req.(*GidHasCidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Conn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Conn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Conn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Conn(ctx, req.(*GConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Disc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDiscReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Disc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Disc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Disc(ctx, req.(*GDiscReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Rep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Rep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Rep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Rep(ctx, req.(*RepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Last_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ILastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Last(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Last_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Last(ctx, req.(*ILastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Push(ctx, req.(*PushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IGQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_GQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GQueue(ctx, req.(*IGQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IGClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_GClear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GClear(ctx, req.(*IGClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GLasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GLastsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GLasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_GLasts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GLasts(ctx, req.(*GLastsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_GLast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GLast(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_GPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GPush(ctx, req.(*GPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GPushA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IGPushAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GPushA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_GPushA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GPushA(ctx, req.(*IGPushAReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Send(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_TPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).TPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_TPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).TPush(ctx, req.(*TPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_TDirty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).TDirty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_TDirty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).TDirty(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_TStarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).TStarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_TStarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).TStarts(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_SetProds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdsRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).SetProds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_SetProds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).SetProds(ctx, req.(*ProdsRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Read(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Unread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Unread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Unread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Unread(ctx, req.(*UnreadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Unreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreadReqs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Unreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_Unreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Unreads(ctx, req.(*UnreadReqs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_UnreadTids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreadTids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).UnreadTids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayI_UnreadTids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).UnreadTids(ctx, req.(*UnreadTids))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayI_ServiceDesc is the grpc.ServiceDesc for GatewayI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gw.GatewayI",
	HandlerType: (*GatewayIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uid",
			Handler:    _GatewayI_Uid_Handler,
		},
		{
			MethodName: "online",
			Handler:    _GatewayI_Online_Handler,
		},
		{
			MethodName: "onlines",
			Handler:    _GatewayI_Onlines_Handler,
		},
		{
			MethodName: "close",
			Handler:    _GatewayI_Close_Handler,
		},
		{
			MethodName: "kick",
			Handler:    _GatewayI_Kick_Handler,
		},
		{
			MethodName: "alive",
			Handler:    _GatewayI_Alive_Handler,
		},
		{
			MethodName: "rid",
			Handler:    _GatewayI_Rid_Handler,
		},
		{
			MethodName: "rids",
			Handler:    _GatewayI_Rids_Handler,
		},
		{
			MethodName: "cids",
			Handler:    _GatewayI_Cids_Handler,
		},
		{
			MethodName: "cidGid",
			Handler:    _GatewayI_CidGid_Handler,
		},
		{
			MethodName: "gidCid",
			Handler:    _GatewayI_GidCid_Handler,
		},
		{
			MethodName: "gidHasCid",
			Handler:    _GatewayI_GidHasCid_Handler,
		},
		{
			MethodName: "conn",
			Handler:    _GatewayI_Conn_Handler,
		},
		{
			MethodName: "disc",
			Handler:    _GatewayI_Disc_Handler,
		},
		{
			MethodName: "rep",
			Handler:    _GatewayI_Rep_Handler,
		},
		{
			MethodName: "last",
			Handler:    _GatewayI_Last_Handler,
		},
		{
			MethodName: "push",
			Handler:    _GatewayI_Push_Handler,
		},
		{
			MethodName: "gQueue",
			Handler:    _GatewayI_GQueue_Handler,
		},
		{
			MethodName: "gClear",
			Handler:    _GatewayI_GClear_Handler,
		},
		{
			MethodName: "gLasts",
			Handler:    _GatewayI_GLasts_Handler,
		},
		{
			MethodName: "gLast",
			Handler:    _GatewayI_GLast_Handler,
		},
		{
			MethodName: "gPush",
			Handler:    _GatewayI_GPush_Handler,
		},
		{
			MethodName: "gPushA",
			Handler:    _GatewayI_GPushA_Handler,
		},
		{
			MethodName: "send",
			Handler:    _GatewayI_Send_Handler,
		},
		{
			MethodName: "tPush",
			Handler:    _GatewayI_TPush_Handler,
		},
		{
			MethodName: "tDirty",
			Handler:    _GatewayI_TDirty_Handler,
		},
		{
			MethodName: "tStarts",
			Handler:    _GatewayI_TStarts_Handler,
		},
		{
			MethodName: "setProds",
			Handler:    _GatewayI_SetProds_Handler,
		},
		{
			MethodName: "read",
			Handler:    _GatewayI_Read_Handler,
		},
		{
			MethodName: "unread",
			Handler:    _GatewayI_Unread_Handler,
		},
		{
			MethodName: "unreads",
			Handler:    _GatewayI_Unreads_Handler,
		},
		{
			MethodName: "unreadTids",
			Handler:    _GatewayI_UnreadTids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsl/gwI.proto",
}
