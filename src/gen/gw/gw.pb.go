// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: dsl/gw.proto

package gw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Result int32

const (
	// 失败
	Result_Fail Result = 1
	// ID不存在
	Result_IdNone Result = 2
	// 分布冲突
	Result_ProdErr Result = 3
	// 成功
	Result_Succ Result = 16
)

// Enum value maps for Result.
var (
	Result_name = map[int32]string{
		0:  "Fail",
		1:  "IdNone",
		2:  "ProdErr",
		16: "Succ",
	}
	Result_value = map[string]int32{
		"Fail":    0,
		"IdNone":  1,
		"ProdErr": 2,
		"Succ":    16,
	}
)

func (x Result) Enum() *Result {
	p := new(Result)
	*p = x
	return p
}

func (x Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dsl_gw_proto_enumTypes[0].Descriptor()
}

func (Result) Type() protoreflect.EnumType {
	return &file_dsl_gw_proto_enumTypes[0]
}

func (x Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Result.Descriptor instead.
func (Result) EnumDescriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{0}
}

type CidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *CidReq) Reset() {
	*x = CidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CidReq) ProtoMessage() {}

func (x *CidReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CidReq.ProtoReflect.Descriptor instead.
func (*CidReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{0}
}

func (x *CidReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

type CidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号列表
	Cids []int64 `protobuf:"varint,1,rep,packed,name=cids,proto3" json:"cids,omitempty"`
}

func (x *CidsReq) Reset() {
	*x = CidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CidsReq) ProtoMessage() {}

func (x *CidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CidsReq.ProtoReflect.Descriptor instead.
func (*CidsReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{1}
}

func (x *CidsReq) GetCids() []int64 {
	if x != nil {
		return x.Cids
	}
	return nil
}

type UIdRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 整形用户编号
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 字符串用户编号
	Sid string `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *UIdRep) Reset() {
	*x = UIdRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIdRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIdRep) ProtoMessage() {}

func (x *UIdRep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIdRep.ProtoReflect.Descriptor instead.
func (*UIdRep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{2}
}

func (x *UIdRep) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UIdRep) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type UIdsRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号列表
	UidReps []*UIdRep `protobuf:"bytes,1,rep,name=uidReps,proto3" json:"uidReps,omitempty"`
}

func (x *UIdsRep) Reset() {
	*x = UIdsRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIdsRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIdsRep) ProtoMessage() {}

func (x *UIdsRep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIdsRep.ProtoReflect.Descriptor instead.
func (*UIdsRep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{3}
}

func (x *UIdsRep) GetUidReps() []*UIdRep {
	if x != nil {
		return x.UidReps
	}
	return nil
}

type GidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号、群组、管道编号
	Gid string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *GidReq) Reset() {
	*x = GidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GidReq) ProtoMessage() {}

func (x *GidReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GidReq.ProtoReflect.Descriptor instead.
func (*GidReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{4}
}

func (x *GidReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

type GidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号、群组、管道编号列表
	Gids []string `protobuf:"bytes,1,rep,name=gids,proto3" json:"gids,omitempty"`
}

func (x *GidsReq) Reset() {
	*x = GidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GidsReq) ProtoMessage() {}

func (x *GidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GidsReq.ProtoReflect.Descriptor instead.
func (*GidsReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{5}
}

func (x *GidsReq) GetGids() []string {
	if x != nil {
		return x.Gids
	}
	return nil
}

type BoolRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 值
	Val bool `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *BoolRep) Reset() {
	*x = BoolRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRep) ProtoMessage() {}

func (x *BoolRep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolRep.ProtoReflect.Descriptor instead.
func (*BoolRep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{6}
}

func (x *BoolRep) GetVal() bool {
	if x != nil {
		return x.Val
	}
	return false
}

type BoolsRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 值列表
	Vals []bool `protobuf:"varint,1,rep,packed,name=vals,proto3" json:"vals,omitempty"`
}

func (x *BoolsRep) Reset() {
	*x = BoolsRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolsRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolsRep) ProtoMessage() {}

func (x *BoolsRep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolsRep.ProtoReflect.Descriptor instead.
func (*BoolsRep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{7}
}

func (x *BoolsRep) GetVals() []bool {
	if x != nil {
		return x.Vals
	}
	return nil
}

type Id32Rep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 整形编号
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Id32Rep) Reset() {
	*x = Id32Rep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id32Rep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id32Rep) ProtoMessage() {}

func (x *Id32Rep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id32Rep.ProtoReflect.Descriptor instead.
func (*Id32Rep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{8}
}

func (x *Id32Rep) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Id64Rep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 长整编号
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Id64Rep) Reset() {
	*x = Id64Rep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id64Rep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id64Rep) ProtoMessage() {}

func (x *Id64Rep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id64Rep.ProtoReflect.Descriptor instead.
func (*Id64Rep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{9}
}

func (x *Id64Rep) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DataRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 二进制数据
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// 请求错误
	Err int32 `protobuf:"varint,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *DataRep) Reset() {
	*x = DataRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRep) ProtoMessage() {}

func (x *DataRep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRep.ProtoReflect.Descriptor instead.
func (*DataRep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{10}
}

func (x *DataRep) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataRep) GetErr() int32 {
	if x != nil {
		return x.Err
	}
	return 0
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端唯一编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 登录数据
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// 客户端地址
	Addr string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{11}
}

func (x *LoginReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *LoginReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LoginReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type LoginRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succ bool `protobuf:"varint,1,opt,name=succ,proto3" json:"succ,omitempty"`
	// 数字编号
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// 字符编号
	Sid string `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
	// 唯一标识(一个标识，只允许一个Conn)
	Unique string `protobuf:"bytes,4,opt,name=unique,proto3" json:"unique,omitempty"`
	// 最大请求数
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// 路由服务编号
	Rid int32 `protobuf:"varint,6,opt,name=rid,proto3" json:"rid,omitempty"`
	// 路由服务映射
	Rids map[string]int32 `protobuf:"bytes,7,rep,name=rids,proto3" json:"rids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 登录返回
	Data []byte `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	// 清理队列
	Clear bool `protobuf:"varint,9,opt,name=clear,proto3" json:"clear,omitempty"`
	// 登录回调
	Back bool `protobuf:"varint,10,opt,name=back,proto3" json:"back,omitempty"`
	// 断线回调
	DiscBack bool `protobuf:"varint,11,opt,name=discBack,proto3" json:"discBack,omitempty"`
	// 登录失败
	KickData []byte `protobuf:"bytes,12,opt,name=kickData,proto3" json:"kickData,omitempty"`
	// 获取管道
	LastsReq *GLastsReq `protobuf:"bytes,13,opt,name=lastsReq,proto3,oneof" json:"lastsReq,omitempty"`
	// 获取管道
	LastsReqs []*GLastsReq `protobuf:"bytes,14,rep,name=lastsReqs,proto3" json:"lastsReqs,omitempty"`
}

func (x *LoginRep) Reset() {
	*x = LoginRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRep) ProtoMessage() {}

func (x *LoginRep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRep.ProtoReflect.Descriptor instead.
func (*LoginRep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{12}
}

func (x *LoginRep) GetSucc() bool {
	if x != nil {
		return x.Succ
	}
	return false
}

func (x *LoginRep) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LoginRep) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *LoginRep) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *LoginRep) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LoginRep) GetRid() int32 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *LoginRep) GetRids() map[string]int32 {
	if x != nil {
		return x.Rids
	}
	return nil
}

func (x *LoginRep) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LoginRep) GetClear() bool {
	if x != nil {
		return x.Clear
	}
	return false
}

func (x *LoginRep) GetBack() bool {
	if x != nil {
		return x.Back
	}
	return false
}

func (x *LoginRep) GetDiscBack() bool {
	if x != nil {
		return x.DiscBack
	}
	return false
}

func (x *LoginRep) GetKickData() []byte {
	if x != nil {
		return x.KickData
	}
	return nil
}

func (x *LoginRep) GetLastsReq() *GLastsReq {
	if x != nil {
		return x.LastsReq
	}
	return nil
}

func (x *LoginRep) GetLastsReqs() []*GLastsReq {
	if x != nil {
		return x.LastsReqs
	}
	return nil
}

type LoginBack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 客户端登录，同用户下唯一标识
	Unique string `protobuf:"bytes,2,opt,name=unique,proto3" json:"unique,omitempty"`
	// 用户整型编号
	Uid int64 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// 用户字符编号
	Sid string `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *LoginBack) Reset() {
	*x = LoginBack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginBack) ProtoMessage() {}

func (x *LoginBack) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginBack.ProtoReflect.Descriptor instead.
func (*LoginBack) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{13}
}

func (x *LoginBack) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *LoginBack) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *LoginBack) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LoginBack) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	Gid string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// 写扩散时，不推送，需要点击查看
	Nofeed bool `protobuf:"varint,2,opt,name=nofeed,proto3" json:"nofeed,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{14}
}

func (x *Member) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *Member) GetNofeed() bool {
	if x != nil {
		return x.Nofeed
	}
	return false
}

type TeamRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 版本
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// 用户列表
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	// 读扩散、写扩散
	ReadFeed bool `protobuf:"varint,3,opt,name=readFeed,proto3" json:"readFeed,omitempty"`
}

func (x *TeamRep) Reset() {
	*x = TeamRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRep) ProtoMessage() {}

func (x *TeamRep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRep.ProtoReflect.Descriptor instead.
func (*TeamRep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{15}
}

func (x *TeamRep) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TeamRep) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *TeamRep) GetReadFeed() bool {
	if x != nil {
		return x.ReadFeed
	}
	return false
}

type AddrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gid
	Gid string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// 子名
	Sub string `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	// 全名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 协议名
	Proto string `protobuf:"bytes,4,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *AddrReq) Reset() {
	*x = AddrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrReq) ProtoMessage() {}

func (x *AddrReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrReq.ProtoReflect.Descriptor instead.
func (*AddrReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{16}
}

func (x *AddrReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *AddrReq) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *AddrReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddrReq) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

type AddrRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 映射地址
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *AddrRep) Reset() {
	*x = AddrRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrRep) ProtoMessage() {}

func (x *AddrRep) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrRep.ProtoReflect.Descriptor instead.
func (*AddrRep) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{17}
}

func (x *AddrRep) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type PassReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 用户整型编号
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// 用户字符编号
	Sid string `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
	// 请求路径
	Uri string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	// 请求数据
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PassReq) Reset() {
	*x = PassReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassReq) ProtoMessage() {}

func (x *PassReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassReq.ProtoReflect.Descriptor instead.
func (*PassReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{18}
}

func (x *PassReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *PassReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PassReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *PassReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *PassReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 关闭原因
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CloseReq) Reset() {
	*x = CloseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseReq) ProtoMessage() {}

func (x *CloseReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseReq.ProtoReflect.Descriptor instead.
func (*CloseReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{19}
}

func (x *CloseReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *CloseReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type KickReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 踢出原因
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KickReq) Reset() {
	*x = KickReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickReq) ProtoMessage() {}

func (x *KickReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickReq.ProtoReflect.Descriptor instead.
func (*KickReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{20}
}

func (x *KickReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *KickReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Pass组名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Pass组服务编号
	Rid int32 `protobuf:"varint,3,opt,name=rid,proto3" json:"rid,omitempty"`
}

func (x *RidReq) Reset() {
	*x = RidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RidReq) ProtoMessage() {}

func (x *RidReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RidReq.ProtoReflect.Descriptor instead.
func (*RidReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{21}
}

func (x *RidReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *RidReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RidReq) GetRid() int32 {
	if x != nil {
		return x.Rid
	}
	return 0
}

type RidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Pass组名，编号映射
	Rids map[string]int32 `protobuf:"bytes,2,rep,name=rids,proto3" json:"rids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RidsReq) Reset() {
	*x = RidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RidsReq) ProtoMessage() {}

func (x *RidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RidsReq.ProtoReflect.Descriptor instead.
func (*RidsReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{22}
}

func (x *RidsReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *RidsReq) GetRids() map[string]int32 {
	if x != nil {
		return x.Rids
	}
	return nil
}

type PushReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 路径
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 数据
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// 是否数据隔离，gw用不到
	Isolate bool `protobuf:"varint,4,opt,name=isolate,proto3" json:"isolate,omitempty"`
	// PUSHI 携带消息编号，gw一般不用
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// 数据压缩状态，gw不用
	CData int32 `protobuf:"varint,6,opt,name=cData,proto3" json:"cData,omitempty"`
}

func (x *PushReq) Reset() {
	*x = PushReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushReq) ProtoMessage() {}

func (x *PushReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushReq.ProtoReflect.Descriptor instead.
func (*PushReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{23}
}

func (x *PushReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *PushReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *PushReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PushReq) GetIsolate() bool {
	if x != nil {
		return x.Isolate
	}
	return false
}

func (x *PushReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PushReq) GetCData() int32 {
	if x != nil {
		return x.CData
	}
	return 0
}

type GPushReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 群组，管道编号
	Gid string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// 路径
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 数据
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// qs 消息质量，0 内存发送成功 1 队列发送[unique 唯一标识(消息队列，一个标识只需要最新数据)] 2 last队列 3 last 队列持久化
	Qs int32 `protobuf:"varint,4,opt,name=qs,proto3" json:"qs,omitempty"`
	// qs 为1时， 唯一unique会覆盖更新
	Unique string `protobuf:"bytes,5,opt,name=unique,proto3" json:"unique,omitempty"`
	// 持久同时是否强制创建队列
	Queue bool `protobuf:"varint,6,opt,name=queue,proto3" json:"queue,omitempty"`
	// PUSHI 携带消息编号，gw一般不用
	Fid int64 `protobuf:"varint,7,opt,name=fid,proto3" json:"fid,omitempty"`
	// 是否数据隔离，gw用不到
	Isolate bool `protobuf:"varint,8,opt,name=isolate,proto3" json:"isolate,omitempty"`
}

func (x *GPushReq) Reset() {
	*x = GPushReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPushReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPushReq) ProtoMessage() {}

func (x *GPushReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPushReq.ProtoReflect.Descriptor instead.
func (*GPushReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{24}
}

func (x *GPushReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GPushReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GPushReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GPushReq) GetQs() int32 {
	if x != nil {
		return x.Qs
	}
	return 0
}

func (x *GPushReq) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *GPushReq) GetQueue() bool {
	if x != nil {
		return x.Queue
	}
	return false
}

func (x *GPushReq) GetFid() int64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *GPushReq) GetIsolate() bool {
	if x != nil {
		return x.Isolate
	}
	return false
}

type GConnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 群组，管道编号
	Gid string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	// 群组，管道编号下连接唯一编号，可以cid或用户uid相同
	Unique string `protobuf:"bytes,3,opt,name=unique,proto3" json:"unique,omitempty"`
	// 连接相同唯一编号后，踢出旧客户端，下线，gw一般不用
	Kick bool `protobuf:"varint,4,opt,name=kick,proto3" json:"kick,omitempty"`
	// 连接信息新版本，gw一般不用
	NewVer bool `protobuf:"varint,5,opt,name=newVer,proto3" json:"newVer,omitempty"`
}

func (x *GConnReq) Reset() {
	*x = GConnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GConnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GConnReq) ProtoMessage() {}

func (x *GConnReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GConnReq.ProtoReflect.Descriptor instead.
func (*GConnReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{25}
}

func (x *GConnReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *GConnReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GConnReq) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *GConnReq) GetKick() bool {
	if x != nil {
		return x.Kick
	}
	return false
}

func (x *GConnReq) GetNewVer() bool {
	if x != nil {
		return x.NewVer
	}
	return false
}

type GDiscReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端编号
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 群组，管道编号
	Gid string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	// 群组，管道编号下连接唯一编号，必须和连接一致
	Unique string `protobuf:"bytes,3,opt,name=unique,proto3" json:"unique,omitempty"`
	// 连接信息新版本
	ConnVer int32 `protobuf:"varint,4,opt,name=connVer,proto3" json:"connVer,omitempty"`
	// 同时踢出旧客户端，下线，gw一般不用
	Kick bool `protobuf:"varint,5,opt,name=kick,proto3" json:"kick,omitempty"`
}

func (x *GDiscReq) Reset() {
	*x = GDiscReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDiscReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDiscReq) ProtoMessage() {}

func (x *GDiscReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDiscReq.ProtoReflect.Descriptor instead.
func (*GDiscReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{26}
}

func (x *GDiscReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *GDiscReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GDiscReq) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *GDiscReq) GetConnVer() int32 {
	if x != nil {
		return x.ConnVer
	}
	return 0
}

func (x *GDiscReq) GetKick() bool {
	if x != nil {
		return x.Kick
	}
	return false
}

type GLastsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 群组，管道编号
	Gid string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// 客户端编号
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// 群组，管道编号下连接唯一编号，可以cid或用户uid相同
	Unique string `protobuf:"bytes,3,opt,name=unique,proto3" json:"unique,omitempty"`
	// 最后消息编号 <65535时 = 获取缓存消息数量， lastId = 1
	LastId int64 `protobuf:"varint,4,opt,name=lastId,proto3" json:"lastId,omitempty"`
	// <= 0 不连续获取， 每次通过REQ_LAST 通知更新后，主动再调用GLasts， =1 不发送REQ_LASTC管道LASTC消息 >1 最多多少条消息发送管道LASTC消息
	Continuous int32 `protobuf:"varint,5,opt,name=continuous,proto3" json:"continuous,omitempty"`
}

func (x *GLastsReq) Reset() {
	*x = GLastsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GLastsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GLastsReq) ProtoMessage() {}

func (x *GLastsReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GLastsReq.ProtoReflect.Descriptor instead.
func (*GLastsReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{27}
}

func (x *GLastsReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GLastsReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *GLastsReq) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *GLastsReq) GetLastId() int64 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *GLastsReq) GetContinuous() int32 {
	if x != nil {
		return x.Continuous
	}
	return 0
}

type SendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发送放用户编号
	FromId string `protobuf:"bytes,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	// 接收方用户编号
	ToId string `protobuf:"bytes,2,opt,name=toId,proto3" json:"toId,omitempty"`
	// 消息路径
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 消息数据
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// 是否持久消息
	Db bool `protobuf:"varint,5,opt,name=db,proto3" json:"db,omitempty"`
}

func (x *SendReq) Reset() {
	*x = SendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReq) ProtoMessage() {}

func (x *SendReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReq.ProtoReflect.Descriptor instead.
func (*SendReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{28}
}

func (x *SendReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *SendReq) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

func (x *SendReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *SendReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendReq) GetDb() bool {
	if x != nil {
		return x.Db
	}
	return false
}

type TPushReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发送方用户编号
	FromId string `protobuf:"bytes,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	// 群编号
	Tid string `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// 读扩散
	ReadFeed bool `protobuf:"varint,3,opt,name=readFeed,proto3" json:"readFeed,omitempty"`
	// 消息路径
	Uri string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	// 消息数据
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// 是否持久消息
	Db bool `protobuf:"varint,6,opt,name=db,proto3" json:"db,omitempty"`
	// 持久同时是否强制创建队列
	Queue bool `protobuf:"varint,7,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *TPushReq) Reset() {
	*x = TPushReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPushReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPushReq) ProtoMessage() {}

func (x *TPushReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPushReq.ProtoReflect.Descriptor instead.
func (*TPushReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{29}
}

func (x *TPushReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *TPushReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TPushReq) GetReadFeed() bool {
	if x != nil {
		return x.ReadFeed
	}
	return false
}

func (x *TPushReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *TPushReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TPushReq) GetDb() bool {
	if x != nil {
		return x.Db
	}
	return false
}

func (x *TPushReq) GetQueue() bool {
	if x != nil {
		return x.Queue
	}
	return false
}

type RevokeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Gid string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *RevokeReq) Reset() {
	*x = RevokeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gw_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeReq) ProtoMessage() {}

func (x *RevokeReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gw_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeReq.ProtoReflect.Descriptor instead.
func (*RevokeReq) Descriptor() ([]byte, []int) {
	return file_dsl_gw_proto_rawDescGZIP(), []int{30}
}

func (x *RevokeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RevokeReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

var File_dsl_gw_proto protoreflect.FileDescriptor

var file_dsl_gw_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x73, 0x6c, 0x2f, 0x67, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x67, 0x77, 0x22, 0x1a, 0x0a, 0x06, 0x43, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x22, 0x1d,
	0x0a, 0x07, 0x43, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x63, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a,
	0x06, 0x55, 0x49, 0x64, 0x52, 0x65, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x07, 0x55,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x12, 0x24, 0x0a, 0x07, 0x75, 0x69, 0x64, 0x52, 0x65, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x49, 0x64,
	0x52, 0x65, 0x70, 0x52, 0x07, 0x75, 0x69, 0x64, 0x52, 0x65, 0x70, 0x73, 0x22, 0x1a, 0x0a, 0x06,
	0x47, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x07, 0x47, 0x69, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x69, 0x64, 0x73, 0x22, 0x1b, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x76, 0x61, 0x6c, 0x22, 0x1e, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x04,
	0x76, 0x61, 0x6c, 0x73, 0x22, 0x19, 0x0a, 0x07, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x19, 0x0a, 0x07, 0x49, 0x64, 0x36, 0x34, 0x52, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x07, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x44, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x22, 0xc7, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x75, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x75,
	0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x2e, 0x52, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x72, 0x69,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6b, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x77, 0x2e,
	0x47, 0x4c, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x77,
	0x2e, 0x47, 0x4c, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x52, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x22, 0x59, 0x0a, 0x09, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x66, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x66, 0x65, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x07, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65,
	0x64, 0x22, 0x57, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x65, 0x0a, 0x07, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x34, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x07, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x06, 0x52, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x07, 0x52, 0x69, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x77, 0x2e, 0x52, 0x69, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x2e, 0x52, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x72, 0x69, 0x64,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x52, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x07, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x44, 0x61, 0x74, 0x61, 0x22, 0xac,
	0x01, 0x0a, 0x08, 0x47, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x71, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x66, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x72, 0x0a,
	0x08, 0x47, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77,
	0x56, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x56, 0x65,
	0x72, 0x22, 0x74, 0x0a, 0x08, 0x47, 0x44, 0x69, 0x73, 0x63, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x6e, 0x56, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e,
	0x56, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x22, 0x7f, 0x0a, 0x09, 0x47, 0x4c, 0x61, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x22, 0x6b, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x64, 0x62, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x54, 0x50, 0x75, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x64, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x64, 0x62, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x09, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x67, 0x69, 0x64, 0x2a, 0x35, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x64, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x45, 0x72, 0x72, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x75, 0x63, 0x63, 0x10, 0x10, 0x32, 0xbe, 0x01, 0x0a, 0x03, 0x41,
	0x63, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x67, 0x77,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x12, 0x27, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x42, 0x61, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x67, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x61, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70,
	0x12, 0x26, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x67,
	0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x67, 0x77,
	0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67,
	0x77, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x67, 0x77, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x70, 0x32, 0x49, 0x0a, 0x04, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x12, 0x0b, 0x2e, 0x67, 0x77, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x0b, 0x2e, 0x67,
	0x77, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49,
	0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x32, 0xde, 0x04, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x1d, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x43,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x49, 0x64, 0x52, 0x65,
	0x70, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0a, 0x2e, 0x67, 0x77,
	0x2e, 0x47, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x12, 0x24, 0x0a, 0x07, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x67,
	0x77, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20,
	0x0a, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x4b, 0x69, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70,
	0x12, 0x1e, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x52, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70,
	0x12, 0x20, 0x0a, 0x04, 0x72, 0x69, 0x64, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x52, 0x69,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52,
	0x65, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x0b, 0x2e, 0x67, 0x77, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33,
	0x32, 0x52, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x0c, 0x2e,
	0x67, 0x77, 0x2e, 0x47, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77,
	0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x67, 0x44, 0x69, 0x73,
	0x63, 0x12, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x44, 0x69, 0x73, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x05,
	0x67, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x22,
	0x0a, 0x05, 0x67, 0x50, 0x75, 0x73, 0x68, 0x12, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x36, 0x34, 0x52,
	0x65, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x67,
	0x77, 0x2e, 0x47, 0x4c, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77,
	0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64,
	0x12, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x12, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x54, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x21,
	0x0a, 0x06, 0x74, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65,
	0x70, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x0d, 0x2e, 0x67, 0x77,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x42, 0x10, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x2e, 0x67,
	0x77, 0x50, 0x01, 0x5a, 0x04, 0x2e, 0x2f, 0x67, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dsl_gw_proto_rawDescOnce sync.Once
	file_dsl_gw_proto_rawDescData = file_dsl_gw_proto_rawDesc
)

func file_dsl_gw_proto_rawDescGZIP() []byte {
	file_dsl_gw_proto_rawDescOnce.Do(func() {
		file_dsl_gw_proto_rawDescData = protoimpl.X.CompressGZIP(file_dsl_gw_proto_rawDescData)
	})
	return file_dsl_gw_proto_rawDescData
}

var file_dsl_gw_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dsl_gw_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_dsl_gw_proto_goTypes = []interface{}{
	(Result)(0),       // 0: gw.Result
	(*CidReq)(nil),    // 1: gw.CidReq
	(*CidsReq)(nil),   // 2: gw.CidsReq
	(*UIdRep)(nil),    // 3: gw.UIdRep
	(*UIdsRep)(nil),   // 4: gw.UIdsRep
	(*GidReq)(nil),    // 5: gw.GidReq
	(*GidsReq)(nil),   // 6: gw.GidsReq
	(*BoolRep)(nil),   // 7: gw.BoolRep
	(*BoolsRep)(nil),  // 8: gw.BoolsRep
	(*Id32Rep)(nil),   // 9: gw.Id32Rep
	(*Id64Rep)(nil),   // 10: gw.Id64Rep
	(*DataRep)(nil),   // 11: gw.DataRep
	(*LoginReq)(nil),  // 12: gw.LoginReq
	(*LoginRep)(nil),  // 13: gw.LoginRep
	(*LoginBack)(nil), // 14: gw.LoginBack
	(*Member)(nil),    // 15: gw.Member
	(*TeamRep)(nil),   // 16: gw.TeamRep
	(*AddrReq)(nil),   // 17: gw.AddrReq
	(*AddrRep)(nil),   // 18: gw.AddrRep
	(*PassReq)(nil),   // 19: gw.PassReq
	(*CloseReq)(nil),  // 20: gw.CloseReq
	(*KickReq)(nil),   // 21: gw.KickReq
	(*RidReq)(nil),    // 22: gw.RidReq
	(*RidsReq)(nil),   // 23: gw.RidsReq
	(*PushReq)(nil),   // 24: gw.PushReq
	(*GPushReq)(nil),  // 25: gw.GPushReq
	(*GConnReq)(nil),  // 26: gw.GConnReq
	(*GDiscReq)(nil),  // 27: gw.GDiscReq
	(*GLastsReq)(nil), // 28: gw.GLastsReq
	(*SendReq)(nil),   // 29: gw.SendReq
	(*TPushReq)(nil),  // 30: gw.TPushReq
	(*RevokeReq)(nil), // 31: gw.RevokeReq
	nil,               // 32: gw.LoginRep.RidsEntry
	nil,               // 33: gw.RidsReq.RidsEntry
}
var file_dsl_gw_proto_depIdxs = []int32{
	3,  // 0: gw.UIdsRep.uidReps:type_name -> gw.UIdRep
	32, // 1: gw.LoginRep.rids:type_name -> gw.LoginRep.RidsEntry
	28, // 2: gw.LoginRep.lastsReq:type_name -> gw.GLastsReq
	28, // 3: gw.LoginRep.lastsReqs:type_name -> gw.GLastsReq
	15, // 4: gw.TeamRep.members:type_name -> gw.Member
	33, // 5: gw.RidsReq.rids:type_name -> gw.RidsReq.RidsEntry
	12, // 6: gw.Acl.login:input_type -> gw.LoginReq
	14, // 7: gw.Acl.loginBack:input_type -> gw.LoginBack
	14, // 8: gw.Acl.discBack:input_type -> gw.LoginBack
	5,  // 9: gw.Acl.team:input_type -> gw.GidReq
	17, // 10: gw.Acl.addr:input_type -> gw.AddrReq
	19, // 11: gw.Pass.req:input_type -> gw.PassReq
	19, // 12: gw.Pass.send:input_type -> gw.PassReq
	1,  // 13: gw.Gateway.uid:input_type -> gw.CidReq
	5,  // 14: gw.Gateway.online:input_type -> gw.GidReq
	6,  // 15: gw.Gateway.onlines:input_type -> gw.GidsReq
	20, // 16: gw.Gateway.close:input_type -> gw.CloseReq
	21, // 17: gw.Gateway.kick:input_type -> gw.KickReq
	22, // 18: gw.Gateway.rid:input_type -> gw.RidReq
	23, // 19: gw.Gateway.rids:input_type -> gw.RidsReq
	24, // 20: gw.Gateway.push:input_type -> gw.PushReq
	26, // 21: gw.Gateway.gConn:input_type -> gw.GConnReq
	27, // 22: gw.Gateway.gDisc:input_type -> gw.GDiscReq
	5,  // 23: gw.Gateway.gLast:input_type -> gw.GidReq
	25, // 24: gw.Gateway.gPush:input_type -> gw.GPushReq
	28, // 25: gw.Gateway.gLasts:input_type -> gw.GLastsReq
	29, // 26: gw.Gateway.send:input_type -> gw.SendReq
	30, // 27: gw.Gateway.tPush:input_type -> gw.TPushReq
	5,  // 28: gw.Gateway.tDirty:input_type -> gw.GidReq
	31, // 29: gw.Gateway.revoke:input_type -> gw.RevokeReq
	13, // 30: gw.Acl.login:output_type -> gw.LoginRep
	9,  // 31: gw.Acl.loginBack:output_type -> gw.Id32Rep
	9,  // 32: gw.Acl.discBack:output_type -> gw.Id32Rep
	16, // 33: gw.Acl.team:output_type -> gw.TeamRep
	18, // 34: gw.Acl.addr:output_type -> gw.AddrRep
	11, // 35: gw.Pass.req:output_type -> gw.DataRep
	9,  // 36: gw.Pass.send:output_type -> gw.Id32Rep
	3,  // 37: gw.Gateway.uid:output_type -> gw.UIdRep
	7,  // 38: gw.Gateway.online:output_type -> gw.BoolRep
	8,  // 39: gw.Gateway.onlines:output_type -> gw.BoolsRep
	9,  // 40: gw.Gateway.close:output_type -> gw.Id32Rep
	9,  // 41: gw.Gateway.kick:output_type -> gw.Id32Rep
	9,  // 42: gw.Gateway.rid:output_type -> gw.Id32Rep
	9,  // 43: gw.Gateway.rids:output_type -> gw.Id32Rep
	9,  // 44: gw.Gateway.push:output_type -> gw.Id32Rep
	9,  // 45: gw.Gateway.gConn:output_type -> gw.Id32Rep
	9,  // 46: gw.Gateway.gDisc:output_type -> gw.Id32Rep
	9,  // 47: gw.Gateway.gLast:output_type -> gw.Id32Rep
	10, // 48: gw.Gateway.gPush:output_type -> gw.Id64Rep
	9,  // 49: gw.Gateway.gLasts:output_type -> gw.Id32Rep
	9,  // 50: gw.Gateway.send:output_type -> gw.Id32Rep
	9,  // 51: gw.Gateway.tPush:output_type -> gw.Id32Rep
	9,  // 52: gw.Gateway.tDirty:output_type -> gw.Id32Rep
	7,  // 53: gw.Gateway.revoke:output_type -> gw.BoolRep
	30, // [30:54] is the sub-list for method output_type
	6,  // [6:30] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_dsl_gw_proto_init() }
func file_dsl_gw_proto_init() {
	if File_dsl_gw_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dsl_gw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIdRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIdsRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolsRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id32Rep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id64Rep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginBack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPushReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GConnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDiscReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GLastsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPushReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gw_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dsl_gw_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dsl_gw_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_dsl_gw_proto_goTypes,
		DependencyIndexes: file_dsl_gw_proto_depIdxs,
		EnumInfos:         file_dsl_gw_proto_enumTypes,
		MessageInfos:      file_dsl_gw_proto_msgTypes,
	}.Build()
	File_dsl_gw_proto = out.File
	file_dsl_gw_proto_rawDesc = nil
	file_dsl_gw_proto_goTypes = nil
	file_dsl_gw_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AclClient is the client API for Acl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AclClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRep, error)
	// 登录回调
	LoginBack(ctx context.Context, in *LoginBack, opts ...grpc.CallOption) (*Id32Rep, error)
	// 断线回调
	DiscBack(ctx context.Context, in *LoginBack, opts ...grpc.CallOption) (*Id32Rep, error)
	// 组查询 tid
	Team(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*TeamRep, error)
	// 代理查询
	Addr(ctx context.Context, in *AddrReq, opts ...grpc.CallOption) (*AddrRep, error)
}

type aclClient struct {
	cc grpc.ClientConnInterface
}

func NewAclClient(cc grpc.ClientConnInterface) AclClient {
	return &aclClient{cc}
}

func (c *aclClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRep, error) {
	out := new(LoginRep)
	err := c.cc.Invoke(ctx, "/gw.Acl/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) LoginBack(ctx context.Context, in *LoginBack, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Acl/loginBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) DiscBack(ctx context.Context, in *LoginBack, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Acl/discBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) Team(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*TeamRep, error) {
	out := new(TeamRep)
	err := c.cc.Invoke(ctx, "/gw.Acl/team", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) Addr(ctx context.Context, in *AddrReq, opts ...grpc.CallOption) (*AddrRep, error) {
	out := new(AddrRep)
	err := c.cc.Invoke(ctx, "/gw.Acl/addr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AclServer is the server API for Acl service.
type AclServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginRep, error)
	// 登录回调
	LoginBack(context.Context, *LoginBack) (*Id32Rep, error)
	// 断线回调
	DiscBack(context.Context, *LoginBack) (*Id32Rep, error)
	// 组查询 tid
	Team(context.Context, *GidReq) (*TeamRep, error)
	// 代理查询
	Addr(context.Context, *AddrReq) (*AddrRep, error)
}

// UnimplementedAclServer can be embedded to have forward compatible implementations.
type UnimplementedAclServer struct {
}

func (*UnimplementedAclServer) Login(context.Context, *LoginReq) (*LoginRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAclServer) LoginBack(context.Context, *LoginBack) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBack not implemented")
}
func (*UnimplementedAclServer) DiscBack(context.Context, *LoginBack) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscBack not implemented")
}
func (*UnimplementedAclServer) Team(context.Context, *GidReq) (*TeamRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Team not implemented")
}
func (*UnimplementedAclServer) Addr(context.Context, *AddrReq) (*AddrRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addr not implemented")
}

func RegisterAclServer(s *grpc.Server, srv AclServer) {
	s.RegisterService(&_Acl_serviceDesc, srv)
}

func _Acl_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Acl/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_LoginBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).LoginBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Acl/LoginBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).LoginBack(ctx, req.(*LoginBack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_DiscBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).DiscBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Acl/DiscBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).DiscBack(ctx, req.(*LoginBack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_Team_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).Team(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Acl/Team",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).Team(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_Addr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).Addr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Acl/Addr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).Addr(ctx, req.(*AddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Acl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.Acl",
	HandlerType: (*AclServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _Acl_Login_Handler,
		},
		{
			MethodName: "loginBack",
			Handler:    _Acl_LoginBack_Handler,
		},
		{
			MethodName: "discBack",
			Handler:    _Acl_DiscBack_Handler,
		},
		{
			MethodName: "team",
			Handler:    _Acl_Team_Handler,
		},
		{
			MethodName: "addr",
			Handler:    _Acl_Addr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsl/gw.proto",
}

// PassClient is the client API for Pass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PassClient interface {
	// 请求
	Req(ctx context.Context, in *PassReq, opts ...grpc.CallOption) (*DataRep, error)
	// 发送
	Send(ctx context.Context, in *PassReq, opts ...grpc.CallOption) (*Id32Rep, error)
}

type passClient struct {
	cc grpc.ClientConnInterface
}

func NewPassClient(cc grpc.ClientConnInterface) PassClient {
	return &passClient{cc}
}

func (c *passClient) Req(ctx context.Context, in *PassReq, opts ...grpc.CallOption) (*DataRep, error) {
	out := new(DataRep)
	err := c.cc.Invoke(ctx, "/gw.Pass/req", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) Send(ctx context.Context, in *PassReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Pass/send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassServer is the server API for Pass service.
type PassServer interface {
	// 请求
	Req(context.Context, *PassReq) (*DataRep, error)
	// 发送
	Send(context.Context, *PassReq) (*Id32Rep, error)
}

// UnimplementedPassServer can be embedded to have forward compatible implementations.
type UnimplementedPassServer struct {
}

func (*UnimplementedPassServer) Req(context.Context, *PassReq) (*DataRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Req not implemented")
}
func (*UnimplementedPassServer) Send(context.Context, *PassReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterPassServer(s *grpc.Server, srv PassServer) {
	s.RegisterService(&_Pass_serviceDesc, srv)
}

func _Pass_Req_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Req(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Pass/Req",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Req(ctx, req.(*PassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Pass/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Send(ctx, req.(*PassReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pass_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.Pass",
	HandlerType: (*PassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "req",
			Handler:    _Pass_Req_Handler,
		},
		{
			MethodName: "send",
			Handler:    _Pass_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsl/gw.proto",
}

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	// uid查询
	Uid(ctx context.Context, in *CidReq, opts ...grpc.CallOption) (*UIdRep, error)
	// 在线查询
	Online(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*BoolRep, error)
	// 在线查询
	Onlines(ctx context.Context, in *GidsReq, opts ...grpc.CallOption) (*BoolsRep, error)
	// 关闭连接
	Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 软关闭连接
	Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 服务编号
	Rid(ctx context.Context, in *RidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 服务编号
	Rids(ctx context.Context, in *RidsReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 简单推送
	Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 注册监听gid
	GConn(ctx context.Context, in *GConnReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 断开监听gid
	GDisc(ctx context.Context, in *GDiscReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 组通知 gid
	GLast(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 组推送 // uri 主题 // binary 消息体 // qs 消息质量，0 内存发送成功 1 队列发送[unique 唯一标识(消息队列，一个标识只需要最新数据)] 2 last队列 3 last 队列持久化
	GPush(ctx context.Context, in *GPushReq, opts ...grpc.CallOption) (*Id64Rep, error)
	// 获取组更新消息
	GLasts(ctx context.Context, in *GLastsReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 点对点聊天
	Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// readfeed读扩散，常用于聊天室
	TPush(ctx context.Context, in *TPushReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 组更新、删除 tid
	TDirty(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 撤销消息
	Revoke(ctx context.Context, in *RevokeReq, opts ...grpc.CallOption) (*BoolRep, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Uid(ctx context.Context, in *CidReq, opts ...grpc.CallOption) (*UIdRep, error) {
	out := new(UIdRep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/uid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Online(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*BoolRep, error) {
	out := new(BoolRep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/online", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Onlines(ctx context.Context, in *GidsReq, opts ...grpc.CallOption) (*BoolsRep, error) {
	out := new(BoolsRep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/onlines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Rid(ctx context.Context, in *RidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/rid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Rids(ctx context.Context, in *RidsReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/rids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GConn(ctx context.Context, in *GConnReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/gConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GDisc(ctx context.Context, in *GDiscReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/gDisc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GLast(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/gLast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GPush(ctx context.Context, in *GPushReq, opts ...grpc.CallOption) (*Id64Rep, error) {
	out := new(Id64Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/gPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GLasts(ctx context.Context, in *GLastsReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/gLasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) TPush(ctx context.Context, in *TPushReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/tPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) TDirty(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/tDirty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Revoke(ctx context.Context, in *RevokeReq, opts ...grpc.CallOption) (*BoolRep, error) {
	out := new(BoolRep)
	err := c.cc.Invoke(ctx, "/gw.Gateway/revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	// uid查询
	Uid(context.Context, *CidReq) (*UIdRep, error)
	// 在线查询
	Online(context.Context, *GidReq) (*BoolRep, error)
	// 在线查询
	Onlines(context.Context, *GidsReq) (*BoolsRep, error)
	// 关闭连接
	Close(context.Context, *CloseReq) (*Id32Rep, error)
	// 软关闭连接
	Kick(context.Context, *KickReq) (*Id32Rep, error)
	// 服务编号
	Rid(context.Context, *RidReq) (*Id32Rep, error)
	// 服务编号
	Rids(context.Context, *RidsReq) (*Id32Rep, error)
	// 简单推送
	Push(context.Context, *PushReq) (*Id32Rep, error)
	// 注册监听gid
	GConn(context.Context, *GConnReq) (*Id32Rep, error)
	// 断开监听gid
	GDisc(context.Context, *GDiscReq) (*Id32Rep, error)
	// 组通知 gid
	GLast(context.Context, *GidReq) (*Id32Rep, error)
	// 组推送 // uri 主题 // binary 消息体 // qs 消息质量，0 内存发送成功 1 队列发送[unique 唯一标识(消息队列，一个标识只需要最新数据)] 2 last队列 3 last 队列持久化
	GPush(context.Context, *GPushReq) (*Id64Rep, error)
	// 获取组更新消息
	GLasts(context.Context, *GLastsReq) (*Id32Rep, error)
	// 点对点聊天
	Send(context.Context, *SendReq) (*Id32Rep, error)
	// readfeed读扩散，常用于聊天室
	TPush(context.Context, *TPushReq) (*Id32Rep, error)
	// 组更新、删除 tid
	TDirty(context.Context, *GidReq) (*Id32Rep, error)
	// 撤销消息
	Revoke(context.Context, *RevokeReq) (*BoolRep, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) Uid(context.Context, *CidReq) (*UIdRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uid not implemented")
}
func (*UnimplementedGatewayServer) Online(context.Context, *GidReq) (*BoolRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (*UnimplementedGatewayServer) Onlines(context.Context, *GidsReq) (*BoolsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Onlines not implemented")
}
func (*UnimplementedGatewayServer) Close(context.Context, *CloseReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedGatewayServer) Kick(context.Context, *KickReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (*UnimplementedGatewayServer) Rid(context.Context, *RidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rid not implemented")
}
func (*UnimplementedGatewayServer) Rids(context.Context, *RidsReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rids not implemented")
}
func (*UnimplementedGatewayServer) Push(context.Context, *PushReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedGatewayServer) GConn(context.Context, *GConnReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GConn not implemented")
}
func (*UnimplementedGatewayServer) GDisc(context.Context, *GDiscReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GDisc not implemented")
}
func (*UnimplementedGatewayServer) GLast(context.Context, *GidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLast not implemented")
}
func (*UnimplementedGatewayServer) GPush(context.Context, *GPushReq) (*Id64Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GPush not implemented")
}
func (*UnimplementedGatewayServer) GLasts(context.Context, *GLastsReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLasts not implemented")
}
func (*UnimplementedGatewayServer) Send(context.Context, *SendReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedGatewayServer) TPush(context.Context, *TPushReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TPush not implemented")
}
func (*UnimplementedGatewayServer) TDirty(context.Context, *GidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TDirty not implemented")
}
func (*UnimplementedGatewayServer) Revoke(context.Context, *RevokeReq) (*BoolRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Uid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Uid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Uid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Uid(ctx, req.(*CidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Online",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Online(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Onlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Onlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Onlines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Onlines(ctx, req.(*GidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Close(ctx, req.(*CloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Kick(ctx, req.(*KickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Rid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Rid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Rid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Rid(ctx, req.(*RidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Rids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Rids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Rids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Rids(ctx, req.(*RidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Push(ctx, req.(*PushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/GConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GConn(ctx, req.(*GConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GDisc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDiscReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GDisc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/GDisc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GDisc(ctx, req.(*GDiscReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/GLast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GLast(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/GPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GPush(ctx, req.(*GPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GLasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GLastsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GLasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/GLasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GLasts(ctx, req.(*GLastsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Send(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_TPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).TPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/TPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).TPush(ctx, req.(*TPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_TDirty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).TDirty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/TDirty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).TDirty(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Revoke(ctx, req.(*RevokeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uid",
			Handler:    _Gateway_Uid_Handler,
		},
		{
			MethodName: "online",
			Handler:    _Gateway_Online_Handler,
		},
		{
			MethodName: "onlines",
			Handler:    _Gateway_Onlines_Handler,
		},
		{
			MethodName: "close",
			Handler:    _Gateway_Close_Handler,
		},
		{
			MethodName: "kick",
			Handler:    _Gateway_Kick_Handler,
		},
		{
			MethodName: "rid",
			Handler:    _Gateway_Rid_Handler,
		},
		{
			MethodName: "rids",
			Handler:    _Gateway_Rids_Handler,
		},
		{
			MethodName: "push",
			Handler:    _Gateway_Push_Handler,
		},
		{
			MethodName: "gConn",
			Handler:    _Gateway_GConn_Handler,
		},
		{
			MethodName: "gDisc",
			Handler:    _Gateway_GDisc_Handler,
		},
		{
			MethodName: "gLast",
			Handler:    _Gateway_GLast_Handler,
		},
		{
			MethodName: "gPush",
			Handler:    _Gateway_GPush_Handler,
		},
		{
			MethodName: "gLasts",
			Handler:    _Gateway_GLasts_Handler,
		},
		{
			MethodName: "send",
			Handler:    _Gateway_Send_Handler,
		},
		{
			MethodName: "tPush",
			Handler:    _Gateway_TPush_Handler,
		},
		{
			MethodName: "tDirty",
			Handler:    _Gateway_TDirty_Handler,
		},
		{
			MethodName: "revoke",
			Handler:    _Gateway_Revoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsl/gw.proto",
}
