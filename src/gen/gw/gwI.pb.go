// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: dsl/gwI.proto

package gw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri  string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gwI_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gwI_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_dsl_gwI_proto_rawDescGZIP(), []int{0}
}

func (x *Msg) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Msg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ILastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid        int64  `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Gid        string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	ConnVer    int32  `protobuf:"varint,3,opt,name=connVer,proto3" json:"connVer,omitempty"`
	Continuous bool   `protobuf:"varint,4,opt,name=continuous,proto3" json:"continuous,omitempty"`
}

func (x *ILastReq) Reset() {
	*x = ILastReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gwI_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ILastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ILastReq) ProtoMessage() {}

func (x *ILastReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gwI_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ILastReq.ProtoReflect.Descriptor instead.
func (*ILastReq) Descriptor() ([]byte, []int) {
	return file_dsl_gwI_proto_rawDescGZIP(), []int{1}
}

func (x *ILastReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *ILastReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *ILastReq) GetConnVer() int32 {
	if x != nil {
		return x.ConnVer
	}
	return 0
}

func (x *ILastReq) GetContinuous() bool {
	if x != nil {
		return x.Continuous
	}
	return false
}

type IGQueueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid    string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Cid    int64  `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Unique string `protobuf:"bytes,3,opt,name=unique,proto3" json:"unique,omitempty"`
	Clear  bool   `protobuf:"varint,4,opt,name=clear,proto3" json:"clear,omitempty"`
}

func (x *IGQueueReq) Reset() {
	*x = IGQueueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gwI_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IGQueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IGQueueReq) ProtoMessage() {}

func (x *IGQueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gwI_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IGQueueReq.ProtoReflect.Descriptor instead.
func (*IGQueueReq) Descriptor() ([]byte, []int) {
	return file_dsl_gwI_proto_rawDescGZIP(), []int{2}
}

func (x *IGQueueReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *IGQueueReq) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *IGQueueReq) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *IGQueueReq) GetClear() bool {
	if x != nil {
		return x.Clear
	}
	return false
}

type IGClearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid   string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Queue bool   `protobuf:"varint,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Last  bool   `protobuf:"varint,3,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *IGClearReq) Reset() {
	*x = IGClearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gwI_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IGClearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IGClearReq) ProtoMessage() {}

func (x *IGClearReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gwI_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IGClearReq.ProtoReflect.Descriptor instead.
func (*IGClearReq) Descriptor() ([]byte, []int) {
	return file_dsl_gwI_proto_rawDescGZIP(), []int{3}
}

func (x *IGClearReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *IGClearReq) GetQueue() bool {
	if x != nil {
		return x.Queue
	}
	return false
}

func (x *IGClearReq) GetLast() bool {
	if x != nil {
		return x.Last
	}
	return false
}

type IGPushAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid  string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Succ bool   `protobuf:"varint,3,opt,name=succ,proto3" json:"succ,omitempty"`
}

func (x *IGPushAReq) Reset() {
	*x = IGPushAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dsl_gwI_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IGPushAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IGPushAReq) ProtoMessage() {}

func (x *IGPushAReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsl_gwI_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IGPushAReq.ProtoReflect.Descriptor instead.
func (*IGPushAReq) Descriptor() ([]byte, []int) {
	return file_dsl_gwI_proto_rawDescGZIP(), []int{4}
}

func (x *IGPushAReq) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *IGPushAReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IGPushAReq) GetSucc() bool {
	if x != nil {
		return x.Succ
	}
	return false
}

var File_dsl_gwI_proto protoreflect.FileDescriptor

var file_dsl_gwI_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x73, 0x6c, 0x2f, 0x67, 0x77, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x67, 0x77, 0x1a, 0x0c, 0x64, 0x73, 0x6c, 0x2f, 0x67, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2b, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68,
	0x0a, 0x08, 0x49, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x56, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x56, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x22, 0x5e, 0x0a, 0x0a, 0x49, 0x47, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x48, 0x0a, 0x0a, 0x49, 0x47, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61,
	0x73, 0x74, 0x22, 0x42, 0x0a, 0x0a, 0x49, 0x47, 0x50, 0x75, 0x73, 0x68, 0x41, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x75, 0x63, 0x63, 0x32, 0xad, 0x05, 0x0a, 0x08, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0c, 0x2e, 0x67,
	0x77, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e,
	0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x12,
	0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67,
	0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x43, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x03, 0x72,
	0x69, 0x64, 0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x52, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x72,
	0x69, 0x64, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x52, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x21, 0x0a,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x43, 0x6f, 0x6e, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70,
	0x12, 0x21, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x63, 0x12, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x44,
	0x69, 0x73, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32,
	0x52, 0x65, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x67, 0x77,
	0x2e, 0x49, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49,
	0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x0b,
	0x2e, 0x67, 0x77, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77,
	0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x25, 0x0a, 0x06, 0x67, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x0e, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x47, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12,
	0x25, 0x0a, 0x06, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x0e, 0x2e, 0x67, 0x77, 0x2e, 0x49,
	0x47, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49,
	0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x73,
	0x12, 0x0d, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x4c, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x05,
	0x67, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x22,
	0x0a, 0x05, 0x67, 0x50, 0x75, 0x73, 0x68, 0x12, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x47, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x36, 0x34, 0x52,
	0x65, 0x70, 0x12, 0x25, 0x0a, 0x06, 0x67, 0x50, 0x75, 0x73, 0x68, 0x41, 0x12, 0x0e, 0x2e, 0x67,
	0x77, 0x2e, 0x49, 0x47, 0x50, 0x75, 0x73, 0x68, 0x41, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67,
	0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x65, 0x6e,
	0x64, 0x12, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x0c, 0x2e, 0x67, 0x77, 0x2e, 0x54, 0x50, 0x75, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x12,
	0x21, 0x0a, 0x06, 0x74, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x0a, 0x2e, 0x67, 0x77, 0x2e, 0x47,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x33, 0x32, 0x52,
	0x65, 0x70, 0x12, 0x22, 0x0a, 0x07, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x0a, 0x2e,
	0x67, 0x77, 0x2e, 0x47, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x77, 0x2e, 0x49,
	0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x67, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dsl_gwI_proto_rawDescOnce sync.Once
	file_dsl_gwI_proto_rawDescData = file_dsl_gwI_proto_rawDesc
)

func file_dsl_gwI_proto_rawDescGZIP() []byte {
	file_dsl_gwI_proto_rawDescOnce.Do(func() {
		file_dsl_gwI_proto_rawDescData = protoimpl.X.CompressGZIP(file_dsl_gwI_proto_rawDescData)
	})
	return file_dsl_gwI_proto_rawDescData
}

var file_dsl_gwI_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_dsl_gwI_proto_goTypes = []interface{}{
	(*Msg)(nil),        // 0: gw.Msg
	(*ILastReq)(nil),   // 1: gw.ILastReq
	(*IGQueueReq)(nil), // 2: gw.IGQueueReq
	(*IGClearReq)(nil), // 3: gw.IGClearReq
	(*IGPushAReq)(nil), // 4: gw.IGPushAReq
	(*CloseReq)(nil),   // 5: gw.CloseReq
	(*KickReq)(nil),    // 6: gw.KickReq
	(*CidReq)(nil),     // 7: gw.CidReq
	(*RidReq)(nil),     // 8: gw.RidReq
	(*RidsReq)(nil),    // 9: gw.RidsReq
	(*GConnReq)(nil),   // 10: gw.GConnReq
	(*GDiscReq)(nil),   // 11: gw.GDiscReq
	(*PushReq)(nil),    // 12: gw.PushReq
	(*GLastsReq)(nil),  // 13: gw.GLastsReq
	(*GidReq)(nil),     // 14: gw.GidReq
	(*GPushReq)(nil),   // 15: gw.GPushReq
	(*SendReq)(nil),    // 16: gw.SendReq
	(*TPushReq)(nil),   // 17: gw.TPushReq
	(*Id32Rep)(nil),    // 18: gw.Id32Rep
	(*Id64Rep)(nil),    // 19: gw.Id64Rep
}
var file_dsl_gwI_proto_depIdxs = []int32{
	5,  // 0: gw.GatewayI.close:input_type -> gw.CloseReq
	6,  // 1: gw.GatewayI.kick:input_type -> gw.KickReq
	7,  // 2: gw.GatewayI.alive:input_type -> gw.CidReq
	8,  // 3: gw.GatewayI.rid:input_type -> gw.RidReq
	9,  // 4: gw.GatewayI.rids:input_type -> gw.RidsReq
	10, // 5: gw.GatewayI.conn:input_type -> gw.GConnReq
	11, // 6: gw.GatewayI.disc:input_type -> gw.GDiscReq
	1,  // 7: gw.GatewayI.last:input_type -> gw.ILastReq
	12, // 8: gw.GatewayI.push:input_type -> gw.PushReq
	2,  // 9: gw.GatewayI.gQueue:input_type -> gw.IGQueueReq
	3,  // 10: gw.GatewayI.gClear:input_type -> gw.IGClearReq
	13, // 11: gw.GatewayI.gLasts:input_type -> gw.GLastsReq
	14, // 12: gw.GatewayI.gLast:input_type -> gw.GidReq
	15, // 13: gw.GatewayI.gPush:input_type -> gw.GPushReq
	4,  // 14: gw.GatewayI.gPushA:input_type -> gw.IGPushAReq
	16, // 15: gw.GatewayI.send:input_type -> gw.SendReq
	17, // 16: gw.GatewayI.tPush:input_type -> gw.TPushReq
	14, // 17: gw.GatewayI.tDirty:input_type -> gw.GidReq
	14, // 18: gw.GatewayI.tStarts:input_type -> gw.GidReq
	18, // 19: gw.GatewayI.close:output_type -> gw.Id32Rep
	18, // 20: gw.GatewayI.kick:output_type -> gw.Id32Rep
	18, // 21: gw.GatewayI.alive:output_type -> gw.Id32Rep
	18, // 22: gw.GatewayI.rid:output_type -> gw.Id32Rep
	18, // 23: gw.GatewayI.rids:output_type -> gw.Id32Rep
	18, // 24: gw.GatewayI.conn:output_type -> gw.Id32Rep
	18, // 25: gw.GatewayI.disc:output_type -> gw.Id32Rep
	18, // 26: gw.GatewayI.last:output_type -> gw.Id32Rep
	18, // 27: gw.GatewayI.push:output_type -> gw.Id32Rep
	18, // 28: gw.GatewayI.gQueue:output_type -> gw.Id32Rep
	18, // 29: gw.GatewayI.gClear:output_type -> gw.Id32Rep
	18, // 30: gw.GatewayI.gLasts:output_type -> gw.Id32Rep
	18, // 31: gw.GatewayI.gLast:output_type -> gw.Id32Rep
	19, // 32: gw.GatewayI.gPush:output_type -> gw.Id64Rep
	18, // 33: gw.GatewayI.gPushA:output_type -> gw.Id32Rep
	18, // 34: gw.GatewayI.send:output_type -> gw.Id32Rep
	18, // 35: gw.GatewayI.tPush:output_type -> gw.Id32Rep
	18, // 36: gw.GatewayI.tDirty:output_type -> gw.Id32Rep
	18, // 37: gw.GatewayI.tStarts:output_type -> gw.Id32Rep
	19, // [19:38] is the sub-list for method output_type
	0,  // [0:19] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_dsl_gwI_proto_init() }
func file_dsl_gwI_proto_init() {
	if File_dsl_gwI_proto != nil {
		return
	}
	file_dsl_gw_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dsl_gwI_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gwI_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ILastReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gwI_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IGQueueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gwI_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IGClearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dsl_gwI_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IGPushAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dsl_gwI_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dsl_gwI_proto_goTypes,
		DependencyIndexes: file_dsl_gwI_proto_depIdxs,
		MessageInfos:      file_dsl_gwI_proto_msgTypes,
	}.Build()
	File_dsl_gwI_proto = out.File
	file_dsl_gwI_proto_rawDesc = nil
	file_dsl_gwI_proto_goTypes = nil
	file_dsl_gwI_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GatewayIClient is the client API for GatewayI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayIClient interface {
	// 关闭连接
	Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 软关闭连接
	Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 存活 cid
	Alive(ctx context.Context, in *CidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 服务编号
	Rid(ctx context.Context, in *RidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 服务编号
	Rids(ctx context.Context, in *RidsReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 连接
	Conn(ctx context.Context, in *GConnReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 断开
	Disc(ctx context.Context, in *GDiscReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 最新消息通知
	Last(ctx context.Context, in *ILastReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 推送
	Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 消息队列初始化
	GQueue(ctx context.Context, in *IGQueueReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 消息队列清理
	GClear(ctx context.Context, in *IGClearReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 主动获取消息
	GLasts(ctx context.Context, in *GLastsReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 通知 gid
	GLast(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 推送
	GPush(ctx context.Context, in *GPushReq, opts ...grpc.CallOption) (*Id64Rep, error)
	// 推送确认
	GPushA(ctx context.Context, in *IGPushAReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 点对点聊天
	Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 群消息发送
	TPush(ctx context.Context, in *TPushReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 组更新、删除 tid
	TDirty(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error)
	// 组发送管道启动 tid
	TStarts(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error)
}

type gatewayIClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayIClient(cc grpc.ClientConnInterface) GatewayIClient {
	return &gatewayIClient{cc}
}

func (c *gatewayIClient) Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Alive(ctx context.Context, in *CidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/alive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Rid(ctx context.Context, in *RidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/rid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Rids(ctx context.Context, in *RidsReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/rids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Conn(ctx context.Context, in *GConnReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/conn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Disc(ctx context.Context, in *GDiscReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/disc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Last(ctx context.Context, in *ILastReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/last", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GQueue(ctx context.Context, in *IGQueueReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/gQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GClear(ctx context.Context, in *IGClearReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/gClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GLasts(ctx context.Context, in *GLastsReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/gLasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GLast(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/gLast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GPush(ctx context.Context, in *GPushReq, opts ...grpc.CallOption) (*Id64Rep, error) {
	out := new(Id64Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/gPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) GPushA(ctx context.Context, in *IGPushAReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/gPushA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) TPush(ctx context.Context, in *TPushReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/tPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) TDirty(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/tDirty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayIClient) TStarts(ctx context.Context, in *GidReq, opts ...grpc.CallOption) (*Id32Rep, error) {
	out := new(Id32Rep)
	err := c.cc.Invoke(ctx, "/gw.GatewayI/tStarts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayIServer is the server API for GatewayI service.
type GatewayIServer interface {
	// 关闭连接
	Close(context.Context, *CloseReq) (*Id32Rep, error)
	// 软关闭连接
	Kick(context.Context, *KickReq) (*Id32Rep, error)
	// 存活 cid
	Alive(context.Context, *CidReq) (*Id32Rep, error)
	// 服务编号
	Rid(context.Context, *RidReq) (*Id32Rep, error)
	// 服务编号
	Rids(context.Context, *RidsReq) (*Id32Rep, error)
	// 连接
	Conn(context.Context, *GConnReq) (*Id32Rep, error)
	// 断开
	Disc(context.Context, *GDiscReq) (*Id32Rep, error)
	// 最新消息通知
	Last(context.Context, *ILastReq) (*Id32Rep, error)
	// 推送
	Push(context.Context, *PushReq) (*Id32Rep, error)
	// 消息队列初始化
	GQueue(context.Context, *IGQueueReq) (*Id32Rep, error)
	// 消息队列清理
	GClear(context.Context, *IGClearReq) (*Id32Rep, error)
	// 主动获取消息
	GLasts(context.Context, *GLastsReq) (*Id32Rep, error)
	// 通知 gid
	GLast(context.Context, *GidReq) (*Id32Rep, error)
	// 推送
	GPush(context.Context, *GPushReq) (*Id64Rep, error)
	// 推送确认
	GPushA(context.Context, *IGPushAReq) (*Id32Rep, error)
	// 点对点聊天
	Send(context.Context, *SendReq) (*Id32Rep, error)
	// 群消息发送
	TPush(context.Context, *TPushReq) (*Id32Rep, error)
	// 组更新、删除 tid
	TDirty(context.Context, *GidReq) (*Id32Rep, error)
	// 组发送管道启动 tid
	TStarts(context.Context, *GidReq) (*Id32Rep, error)
}

// UnimplementedGatewayIServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayIServer struct {
}

func (*UnimplementedGatewayIServer) Close(context.Context, *CloseReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedGatewayIServer) Kick(context.Context, *KickReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (*UnimplementedGatewayIServer) Alive(context.Context, *CidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (*UnimplementedGatewayIServer) Rid(context.Context, *RidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rid not implemented")
}
func (*UnimplementedGatewayIServer) Rids(context.Context, *RidsReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rids not implemented")
}
func (*UnimplementedGatewayIServer) Conn(context.Context, *GConnReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conn not implemented")
}
func (*UnimplementedGatewayIServer) Disc(context.Context, *GDiscReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disc not implemented")
}
func (*UnimplementedGatewayIServer) Last(context.Context, *ILastReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Last not implemented")
}
func (*UnimplementedGatewayIServer) Push(context.Context, *PushReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedGatewayIServer) GQueue(context.Context, *IGQueueReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GQueue not implemented")
}
func (*UnimplementedGatewayIServer) GClear(context.Context, *IGClearReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GClear not implemented")
}
func (*UnimplementedGatewayIServer) GLasts(context.Context, *GLastsReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLasts not implemented")
}
func (*UnimplementedGatewayIServer) GLast(context.Context, *GidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLast not implemented")
}
func (*UnimplementedGatewayIServer) GPush(context.Context, *GPushReq) (*Id64Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GPush not implemented")
}
func (*UnimplementedGatewayIServer) GPushA(context.Context, *IGPushAReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GPushA not implemented")
}
func (*UnimplementedGatewayIServer) Send(context.Context, *SendReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedGatewayIServer) TPush(context.Context, *TPushReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TPush not implemented")
}
func (*UnimplementedGatewayIServer) TDirty(context.Context, *GidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TDirty not implemented")
}
func (*UnimplementedGatewayIServer) TStarts(context.Context, *GidReq) (*Id32Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TStarts not implemented")
}

func RegisterGatewayIServer(s *grpc.Server, srv GatewayIServer) {
	s.RegisterService(&_GatewayI_serviceDesc, srv)
}

func _GatewayI_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Close(ctx, req.(*CloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Kick(ctx, req.(*KickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Alive(ctx, req.(*CidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Rid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Rid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Rid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Rid(ctx, req.(*RidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Rids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Rids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Rids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Rids(ctx, req.(*RidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Conn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Conn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Conn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Conn(ctx, req.(*GConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Disc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDiscReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Disc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Disc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Disc(ctx, req.(*GDiscReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Last_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ILastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Last(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Last",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Last(ctx, req.(*ILastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Push(ctx, req.(*PushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IGQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/GQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GQueue(ctx, req.(*IGQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IGClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/GClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GClear(ctx, req.(*IGClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GLasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GLastsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GLasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/GLasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GLasts(ctx, req.(*GLastsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/GLast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GLast(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/GPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GPush(ctx, req.(*GPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_GPushA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IGPushAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).GPushA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/GPushA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).GPushA(ctx, req.(*IGPushAReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).Send(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_TPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).TPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/TPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).TPush(ctx, req.(*TPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_TDirty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).TDirty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/TDirty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).TDirty(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayI_TStarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayIServer).TStarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.GatewayI/TStarts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayIServer).TStarts(ctx, req.(*GidReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.GatewayI",
	HandlerType: (*GatewayIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "close",
			Handler:    _GatewayI_Close_Handler,
		},
		{
			MethodName: "kick",
			Handler:    _GatewayI_Kick_Handler,
		},
		{
			MethodName: "alive",
			Handler:    _GatewayI_Alive_Handler,
		},
		{
			MethodName: "rid",
			Handler:    _GatewayI_Rid_Handler,
		},
		{
			MethodName: "rids",
			Handler:    _GatewayI_Rids_Handler,
		},
		{
			MethodName: "conn",
			Handler:    _GatewayI_Conn_Handler,
		},
		{
			MethodName: "disc",
			Handler:    _GatewayI_Disc_Handler,
		},
		{
			MethodName: "last",
			Handler:    _GatewayI_Last_Handler,
		},
		{
			MethodName: "push",
			Handler:    _GatewayI_Push_Handler,
		},
		{
			MethodName: "gQueue",
			Handler:    _GatewayI_GQueue_Handler,
		},
		{
			MethodName: "gClear",
			Handler:    _GatewayI_GClear_Handler,
		},
		{
			MethodName: "gLasts",
			Handler:    _GatewayI_GLasts_Handler,
		},
		{
			MethodName: "gLast",
			Handler:    _GatewayI_GLast_Handler,
		},
		{
			MethodName: "gPush",
			Handler:    _GatewayI_GPush_Handler,
		},
		{
			MethodName: "gPushA",
			Handler:    _GatewayI_GPushA_Handler,
		},
		{
			MethodName: "send",
			Handler:    _GatewayI_Send_Handler,
		},
		{
			MethodName: "tPush",
			Handler:    _GatewayI_TPush_Handler,
		},
		{
			MethodName: "tDirty",
			Handler:    _GatewayI_TDirty_Handler,
		},
		{
			MethodName: "tStarts",
			Handler:    _GatewayI_TStarts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsl/gwI.proto",
}
